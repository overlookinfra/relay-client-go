/*
 * Relay API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v20200615
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponseDefault Error response
type InlineResponseDefault struct {
	Error *Error `json:"error,omitempty"`
}

// NewInlineResponseDefault instantiates a new InlineResponseDefault object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponseDefault() *InlineResponseDefault {
	this := InlineResponseDefault{}
	return &this
}

// NewInlineResponseDefaultWithDefaults instantiates a new InlineResponseDefault object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponseDefaultWithDefaults() *InlineResponseDefault {
	this := InlineResponseDefault{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *InlineResponseDefault) GetError() Error {
	if o == nil || o.Error == nil {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponseDefault) GetErrorOk() (*Error, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *InlineResponseDefault) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *InlineResponseDefault) SetError(v Error) {
	o.Error = &v
}

func (o InlineResponseDefault) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponseDefault struct {
	value *InlineResponseDefault
	isSet bool
}

func (v NullableInlineResponseDefault) Get() *InlineResponseDefault {
	return v.value
}

func (v *NullableInlineResponseDefault) Set(val *InlineResponseDefault) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponseDefault) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponseDefault) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponseDefault(val *InlineResponseDefault) *NullableInlineResponseDefault {
	return &NullableInlineResponseDefault{value: val, isSet: true}
}

func (v NullableInlineResponseDefault) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponseDefault) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


