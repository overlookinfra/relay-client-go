/*
 * Relay API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v20200615
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserTokenWithSecret struct for UserTokenWithSecret
type UserTokenWithSecret struct {
	// ID of the user token
	Id *string `json:"id,omitempty"`
	// Name of the user token
	Name string `json:"name"`
	// Type of token
	Type string `json:"type"`
	User UserSummary `json:"user"`
	// The user token secret
	Secret *string `json:"secret,omitempty"`
}

// NewUserTokenWithSecret instantiates a new UserTokenWithSecret object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserTokenWithSecret(name string, type_ string, user UserSummary) *UserTokenWithSecret {
	this := UserTokenWithSecret{}
	this.Name = name
	this.Type = type_
	this.User = user
	return &this
}

// NewUserTokenWithSecretWithDefaults instantiates a new UserTokenWithSecret object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserTokenWithSecretWithDefaults() *UserTokenWithSecret {
	this := UserTokenWithSecret{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserTokenWithSecret) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTokenWithSecret) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserTokenWithSecret) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UserTokenWithSecret) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *UserTokenWithSecret) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UserTokenWithSecret) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UserTokenWithSecret) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *UserTokenWithSecret) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UserTokenWithSecret) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UserTokenWithSecret) SetType(v string) {
	o.Type = v
}

// GetUser returns the User field value
func (o *UserTokenWithSecret) GetUser() UserSummary {
	if o == nil {
		var ret UserSummary
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *UserTokenWithSecret) GetUserOk() (*UserSummary, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *UserTokenWithSecret) SetUser(v UserSummary) {
	o.User = v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *UserTokenWithSecret) GetSecret() string {
	if o == nil || o.Secret == nil {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTokenWithSecret) GetSecretOk() (*string, bool) {
	if o == nil || o.Secret == nil {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *UserTokenWithSecret) HasSecret() bool {
	if o != nil && o.Secret != nil {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *UserTokenWithSecret) SetSecret(v string) {
	o.Secret = &v
}

func (o UserTokenWithSecret) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["user"] = o.User
	}
	if o.Secret != nil {
		toSerialize["secret"] = o.Secret
	}
	return json.Marshal(toSerialize)
}

type NullableUserTokenWithSecret struct {
	value *UserTokenWithSecret
	isSet bool
}

func (v NullableUserTokenWithSecret) Get() *UserTokenWithSecret {
	return v.value
}

func (v *NullableUserTokenWithSecret) Set(val *UserTokenWithSecret) {
	v.value = val
	v.isSet = true
}

func (v NullableUserTokenWithSecret) IsSet() bool {
	return v.isSet
}

func (v *NullableUserTokenWithSecret) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserTokenWithSecret(val *UserTokenWithSecret) *NullableUserTokenWithSecret {
	return &NullableUserTokenWithSecret{value: val, isSet: true}
}

func (v NullableUserTokenWithSecret) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserTokenWithSecret) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


