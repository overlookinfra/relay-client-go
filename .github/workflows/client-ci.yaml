name: Client CI
on:
  push:
    paths:
    - client/**
  pull_request:
    paths:
    - client/**
defaults:
  run:
    working-directory: client
jobs:
  check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: '1.18'
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/go/pkg/mod
          ~/go/pkg/sumdb
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Check
      run: |
        go mod tidy
        go run github.com/golangci/golangci-lint/cmd/golangci-lint run --timeout 10m
        go generate ./...
        git status --porcelain --untracked-files=no
        if [ -n "$(git status --porcelain --untracked-files=no)" ]; then
          echo "Changes have been detected during generate"
          echo "Ignoring generate issues until v1.0.0 is officially released"
        fi
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: '1.18'
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/go/pkg/mod
          ~/go/pkg/sumdb
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Test
      run: |
        go run gotest.tools/gotestsum -f testname --no-summary output --rerun-fails --packages ./... -- -race --cover
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-go@v2
      with:
        go-version: '1.18'
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: |
          ~/go/pkg/mod
          ~/go/pkg/sumdb
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: Build
      run: |
        go build ./...
  release:
    needs:
    - check
    - test
    - build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/client/v')
    steps:
    - uses: actions/checkout@v2
    - name: Get tag version
      id: get-tag-version
      uses: actions/github-script@v3
      with:
        result-encoding: string
        script: |
          return context.ref.replace(/^refs\/tags\/client\/v/, '');
    - uses: mindsers/changelog-reader-action@v2
      id: read-changelog
      with:
        path: client/CHANGELOG.md
        version: ${{ steps.get-tag-version.outputs.result }}
    - uses: actions/create-release@v1
      id: create-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Client v${{ steps.read-changelog.outputs.version }}
        body: ${{ steps.read-changelog.outputs.changes }}
        prerelease: ${{ steps.read-changelog.outputs.status == 'prereleased' }}
        draft: ${{ steps.read-changelog.outputs.status == 'unreleased' }}
    outputs:
      upload-url: ${{ steps.create-release.outputs.upload_url }}
