version: v1
description: Custom step tutorial 

parameters:
  name:
    description: what's your name?
  
steps:
- name: introduction
  image: relaysh/core
  input: 
  -  echo "-------------- INTRODUCTION --------------"
  -  echo "Relay provides the ability to create custom steps"
  -  echo ""
  -  echo "Ni is a tool in the relaysh/core image that gives you access to things"
  -  echo "like spec parameters, outputs, and secrets."
  -  echo ""
  -  echo "Let's see what we can do with them."

- name: parameters
  image: relaysh/core
  dependsOn: introduction
  input: 
  -  echo "-------------- PARAMETERS --------------"
  -  echo "First, let's start with getting your name."
  -  NAME=$(ni get -p {.name})
  -  echo ""
  -  echo "Your name is ${NAME}" 
  -  echo ""
  -  echo "We got this from passing the parameter from the Workflow to the Step through the spec parameter."
  spec: 
    name:
      $type: Parameter
      name: name

- name: secrets 
  image: relaysh/core
  dependsOn: parameters
  input:
  -  echo "-------------- SECRETS --------------"
  -  echo "Next, let's get a secret"
  -  SECRET=$(ni get -p {.secret})
  -  echo ""
  -  echo "Your secret is ${SECRET}"
  -  echo ""
  -  echo "You can define a secret by declaring the parameter as \$type Secret which must be defined in the Workflow Secrets"
  -  echo "Within the Step, both plaintext parameters and secrets are accessed the same way"
  spec:
    secret:
      $type: Secret
      name: secret

- name: outputs
  image: relaysh/core
  dependsOn: secrets
  input: 
  -  echo "-------------- OUTPUTS --------------"
  -  echo "Next, let's define an output."
  -  echo "An output can be defined in one step and consumed in a subsequent step."
  -  echo ""
  -  echo "Setting value..."
  -  echo "KEY = key"
  -  echo "VALUE = You are awesome!"
  -  ni output set --key "key" --value "You are awesome"

- name: end 
  image: relaysh/core
  dependsOn: outputs
  input: 
  -  echo "-------------- OUTPUTS --------------"
  -  echo "Here's where we can use the output of the previous step"
  -  echo "You pass in the output value through the input spec parameters and reference it like any other parameter."
  -  OUTPUT=$(ni get -p {.output})
  -  echo ""
  -  echo "Echoing output from previous step..."
  -  echo "${OUTPUT}"
  -  echo ""
  -  echo "Thanks for trying this workflow!" 
  spec: 
    output:
      $type: Output
      name: key
      taskName: outputs
    confetti: true
