// Code generated by vfsgen; DO NOT EDIT.

package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// assets statically implements the virtual filesystem provided to vfsgen.
var assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/schemas": &vfsgen۰DirInfo{
			name:    "schemas",
			modTime: time.Time{},
		},
		"/schemas/v1": &vfsgen۰DirInfo{
			name:    "v1",
			modTime: time.Time{},
		},
		"/schemas/v1/Workflow.json": &vfsgen۰CompressedFileInfo{
			name:             "Workflow.json",
			modTime:          time.Time{},
			uncompressedSize: 7545,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x02\xff\xc4\x59\xcd\x6e\xdc\x36\x10\xbe\xfb\x29\x06\x4a\x80\x5e\xe2\x6e\x73\x2a\xe0\x9b\x93\x34\x40\x81\x14\x09\xe2\xa4\x39\x14\x39\x70\xa5\xd1\x8a\x59\x8a\x64\x48\x6a\xed\x45\xe0\x77\x2f\x48\xea\x8f\x5a\x4a\x2b\x69\x9d\xd6\x17\x5b\x12\x67\xe6\x9b\xf9\x66\x86\x43\xfa\xc7\x15\x40\xf2\x5c\xa7\x05\x96\x24\xb9\x81\xa4\x30\x46\xde\x6c\x36\xdf\xb4\xe0\xd7\xfe\xed\xaf\x42\xed\x36\x99\x22\xb9\xb9\xfe\xed\xf7\x8d\x7f\xf7\x2c\x79\x61\xe5\x0c\x35\x0c\xad\xd4\x17\xa1\xf6\x39\x13\xf7\xfe\x75\x86\x3a\x55\x54\x1a\x2a\xb8\xfd\x78\x0b\xf7\xf5\x67\xc8\x30\xa7\x9c\xba\x0f\x5e\xc1\x51\x3a\x79\xb1\xfd\x86\xa9\xf1\xef\xa4\x12\x12\x95\xa1\xa8\x93\x1b\xb0\xf0\x00\x12\x22\xe9\xdf\xa8\xb4\x57\xe8\xdf\xf5\xa4\xb5\x51\x94\xef\x9c\xb4\x7b\x3f\xb0\xff\xa9\xc0\x0e\x81\xc7\x0f\x87\x5a\x5b\x2b\x83\xbc\x2a\x93\x1b\xf8\xa7\x7e\x06\x48\x0e\x2f\x93\xfa\xe1\xab\xfb\xfd\xe8\xd7\x26\x7b\xca\xb3\x27\x42\xe1\x44\x27\x20\xb4\x61\x8d\x02\xe1\xa4\xc4\x15\x40\x6e\x39\x08\xf7\x40\x18\x58\x15\x90\x0b\x05\xa6\x87\xae\x93\x2c\x29\x7f\x87\x7c\x67\x8a\xe4\x06\x5e\x06\xb6\x75\x55\x96\x44\x1d\xd7\x98\x87\x82\xee\x8a\x6b\x86\x07\x64\x20\x0b\x45\x34\x82\x5f\xb2\xa5\x7c\x07\xf7\x05\x31\x01\x1a\xc8\x04\xea\x39\x90\x42\x3b\xcb\x61\x95\x42\x59\x24\x86\x50\x86\x19\xf4\x3e\x83\xc8\x17\xc7\xa7\x10\x25\x4a\xb2\xbb\x94\x9f\xcf\x1f\xdf\x81\x11\x40\xe0\x1e\xb7\x9a\x9a\x29\xae\x72\xa1\x4a\x62\xac\x82\x4a\xd1\x24\x24\x4b\x54\x2a\x7d\x22\x28\x7d\xe3\xbf\x68\x20\x95\x29\x84\xa2\x86\x18\x7a\x40\xf0\x86\x20\x15\x19\x02\x13\x29\x31\x41\x89\x4d\x20\x34\x64\xa7\x63\xf8\x88\x52\xe4\x38\x0b\x1e\xa3\xda\x58\xa2\x72\x85\x78\x6d\x2d\x01\x23\x5b\x64\xda\x62\x2e\x90\x49\x90\x28\x24\x43\xc8\x29\xcf\x46\x22\x48\x0d\x96\x7d\x14\xe3\x71\x8a\x52\x0f\xf0\x18\xf8\x64\x03\xc0\xa2\x5e\xf5\xba\x5d\xcc\xad\x8f\x58\x69\xb2\xb5\x58\x5b\x5f\x32\x62\x08\x68\x89\x29\xcd\x69\xea\x69\xa0\xba\x73\x21\xb0\x2b\x89\x22\x25\x1a\x54\xb3\x6c\x93\x2c\xa3\x3e\x84\x1f\x4e\xfb\xae\x5b\xf1\x5c\x61\x6e\x25\x9f\x6d\xba\xee\xad\x37\x1f\x1a\x2b\x49\xd4\x79\x6d\x50\xae\x60\xf4\x5d\xcd\x62\xd7\x28\x9d\x9e\x29\x8a\xe2\xf0\xee\x0c\xca\x38\x32\xa3\xe8\x6e\x37\x12\x9c\x85\xe0\x5a\x55\xcb\xf1\x7d\xf2\xa2\x03\x88\x57\x35\xcc\xa4\xb7\xb4\xdb\x04\xef\xdc\xa6\xf1\x96\x22\xcb\x56\x64\xd5\x6d\xdb\xd2\x84\x72\x1d\xed\x28\x31\x03\xca\x7d\x55\x06\x85\x2a\x47\x32\xa1\xb6\xd4\xbd\x99\xaa\x90\x18\x82\x03\x61\x15\x86\xbb\xde\x68\x31\x35\x41\x69\x99\x03\x48\x14\x7e\xaf\xa8\xc2\x2c\xdc\x25\x9d\xbe\xe8\x0e\xf9\xc7\x83\x54\xa8\x87\x63\xc3\x69\x17\xc1\x76\x1d\xa0\xc5\x48\x0c\x66\xb0\x3d\xba\x3e\xb1\x25\xe9\x1e\x79\x16\xd6\x58\x97\xfd\x6b\x88\x68\x13\xa8\x2d\xd5\xe1\x60\x34\x49\x43\x86\x39\xa9\x98\x19\x32\x31\x30\xf3\xc6\xaf\xea\xd9\x70\xd1\x4f\xba\xf0\xbe\xb8\x1a\x91\x5d\x4b\xf0\xfb\xa6\x19\xf7\xfd\xea\x56\x2c\xa1\x3c\x88\xb6\x2b\xe6\x8b\x02\x6d\xdb\xc8\xa2\x18\x0f\x66\xab\xa5\x91\xf8\xcc\xe9\xf7\x0a\x07\xf6\x9d\xce\x39\x41\x08\x88\x91\xc8\x33\xfd\x9e\x9f\x61\xfb\xce\x3b\x68\x17\x23\x4f\x69\x6f\x62\x72\xab\x05\xc7\xf7\x79\x50\x35\xf6\xe7\x47\xf0\x34\xed\xe1\x04\xde\x01\xe6\x49\xcd\x61\x87\x6d\x3f\x9f\xf6\xcd\xb9\x98\x26\x51\x75\x09\x75\xfa\xf4\x75\x71\x9f\x71\xfc\x35\x7d\xa6\x5d\x7b\x1a\xda\x80\xa7\x78\xfb\x7f\x2d\xb8\x21\x94\xa3\xea\xef\x53\x41\x14\x67\x28\xb9\x95\x52\x89\x03\x61\x03\x1d\xd1\x4e\xd8\x1a\xfc\x8b\x3e\xd0\xa0\x1b\x8e\x55\x00\x2d\xc3\xf1\x75\x69\x09\xbc\x11\xe9\x1e\x15\x38\x35\x6e\x6c\x75\x35\x80\x0f\x98\x56\xb3\xbb\x41\xaf\x10\x52\x51\x96\x24\x38\x78\x2d\x05\xf4\xda\x6b\xb0\xd3\x13\xd5\xba\x5a\x5c\x8a\x44\xed\xf4\x98\xf9\xd3\xb4\x1e\xb3\x4e\xd4\xae\x2a\x91\x9b\x41\x81\xc6\x0b\x60\xe8\xde\x55\x2c\x95\xfb\x18\x29\x97\x95\x79\x4b\xd9\x25\xc4\xd9\x83\xaa\x42\xe6\x27\x7a\x49\x4c\xe1\x4e\x20\x1c\x72\xca\xd0\xfe\x59\xe9\xee\x18\xe2\xec\x81\x17\x5f\x1a\x4f\x27\xbb\x3e\xa0\x7f\xf6\x4c\x5b\x58\x3e\xb3\xf0\xe9\xc2\x3a\xb3\x2b\xf8\x3a\x99\x2e\xba\xe1\x06\xb6\x64\xc0\x4a\x05\xd7\xee\xd0\x94\x36\xda\x92\x09\x8c\x84\xb1\x0b\xba\x91\x6f\x0e\x67\x5a\x49\xd0\x76\x2e\x75\x8a\xd4\xca\x92\x27\x9c\xfa\x9a\xd9\xfa\xa2\x89\xa1\x9e\xed\xff\xcf\xa1\xa1\x81\xb0\x66\x6e\x38\x39\xf2\x9f\x3f\x8b\xdc\x79\x91\xa8\xba\x2d\xe5\x99\x85\xbf\x44\xdf\xab\x5a\x26\xaa\xf0\xbe\x40\x3e\x4f\x5b\x6f\x86\x5f\xb7\x63\x9f\x46\x65\x2a\x6b\xee\x46\xef\x4a\x96\xe7\x4e\x7d\x1d\x12\x4b\xa1\x55\x53\x83\x3d\x00\x66\x15\xc3\xf3\x84\xcd\x50\xf6\xa1\xd2\xc5\x93\x28\xfa\x82\xdb\x42\x88\xfd\x98\xae\x68\xb0\xe3\x9e\xac\x09\xba\xae\x35\xcd\x09\xfa\xaa\x0e\xd5\x18\x88\xe7\x71\xfb\xf5\xb2\xfd\x36\xb7\xf9\x8b\x3c\x3d\xba\xe9\x84\x1f\xc4\x1e\xfd\x15\x4f\xe3\x55\x7d\x42\x75\x27\x76\xb7\xf3\xa6\x4a\x70\xd0\x47\x6e\xc8\xc3\xca\xde\x19\xf3\x22\x4a\xd6\x69\xa6\xac\x21\x4a\x56\xba\xf8\x69\x24\x59\xe5\xe3\x04\xb9\xff\x6c\x44\xe9\x19\xa0\x3e\x77\xc9\xd8\x5c\xdb\x0b\x40\x9e\x0b\xeb\x81\x25\xa1\xda\x96\xd4\x18\xcc\x00\x0f\xc8\x8d\xbb\xab\x0b\x35\x9e\xbd\x63\x3b\x53\xf3\xcd\xa5\xcf\x45\x73\xca\xf8\x7e\x19\x2d\xe0\x55\x0d\xd0\x2b\xfa\x69\x2c\xd7\xfa\xff\xfb\xf9\xe7\xd2\x51\xe4\xd5\xc9\xf6\x39\x3f\xa8\x4d\x30\xeb\x2d\x78\x51\x34\xf7\x78\xbc\xe4\xbe\xae\x97\xf9\x7b\x3c\xb6\x08\xec\x19\xc0\x8d\x2a\xec\x08\x34\x43\x6e\x68\x7e\xb4\x07\x04\x97\xfe\x4b\x07\x95\xe8\x6d\xf5\xd2\x1a\x6d\xaf\xe3\x1a\x8c\xba\x39\xa8\xd8\x39\xa3\x09\xa1\xbf\xd3\x8b\x03\xbd\xa4\x44\x63\x13\x4a\xb4\x42\xbb\x4b\xde\xab\xc7\xab\x7f\x03\x00\x00\xff\xff\x16\x4a\x47\x42\x79\x1d\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas"].(os.FileInfo),
	}
	fs["/schemas"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1"].(os.FileInfo),
	}
	fs["/schemas/v1"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/schemas/v1/Workflow.json"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
