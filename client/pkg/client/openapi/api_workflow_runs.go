/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"os"
	"strings"
)

// WorkflowRunsApiService WorkflowRunsApi service
type WorkflowRunsApiService service

type WorkflowRunsApiGetWorkflowRunRequest struct {
	ctx               context.Context
	ApiService        *WorkflowRunsApiService
	workflowPath      string
	workflowRunNumber int32
}

func (r WorkflowRunsApiGetWorkflowRunRequest) Execute() (*WorkflowRunEntity, *http.Response, error) {
	return r.ApiService.GetWorkflowRunExecute(r)
}

/*
GetWorkflowRun Gets a workflow run accessed with a workflow name and run number

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workflowPath Folder + Workflow name
 @param workflowRunNumber Run number of the associated workflow
 @return WorkflowRunsApiGetWorkflowRunRequest
*/
func (a *WorkflowRunsApiService) GetWorkflowRun(ctx context.Context, workflowPath string, workflowRunNumber int32) WorkflowRunsApiGetWorkflowRunRequest {
	return WorkflowRunsApiGetWorkflowRunRequest{
		ApiService:        a,
		ctx:               ctx,
		workflowPath:      workflowPath,
		workflowRunNumber: workflowRunNumber,
	}
}

// Execute executes the request
//  @return WorkflowRunEntity
func (a *WorkflowRunsApiService) GetWorkflowRunExecute(r WorkflowRunsApiGetWorkflowRunRequest) (*WorkflowRunEntity, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WorkflowRunEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowRunsApiService.GetWorkflowRun")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/workflows/{workflowPath}/runs/{workflowRunNumber}"
	localVarPath = strings.Replace(localVarPath, "{"+"workflowPath"+"}", url.PathEscape(parameterToString(r.workflowPath, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workflowRunNumber"+"}", url.PathEscape(parameterToString(r.workflowRunNumber, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.workflowRunNumber < 1 {
		return localVarReturnValue, nil, reportError("workflowRunNumber must be greater than 1")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.puppet.relay.v20200615+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GetAccessDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type WorkflowRunsApiGetWorkflowRunStepLogRequest struct {
	ctx               context.Context
	ApiService        *WorkflowRunsApiService
	workflowPath      string
	workflowRunNumber int32
	workflowStepName  string
	follow            *bool
}

// If true and the step is in progress, print known logs so far, then wait to send the next log chunk. Only use in conjunction with Accept: application/octet-stream.
func (r WorkflowRunsApiGetWorkflowRunStepLogRequest) Follow(follow bool) WorkflowRunsApiGetWorkflowRunStepLogRequest {
	r.follow = &follow
	return r
}

func (r WorkflowRunsApiGetWorkflowRunStepLogRequest) Execute() (**os.File, *http.Response, error) {
	return r.ApiService.GetWorkflowRunStepLogExecute(r)
}

/*
GetWorkflowRunStepLog Returns the log for a workflow step, accessed by workflow name, run number, and step name

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workflowPath Folder + Workflow name
 @param workflowRunNumber Run number of the associated workflow
 @param workflowStepName The name of the step in the associated workflow
 @return WorkflowRunsApiGetWorkflowRunStepLogRequest
*/
func (a *WorkflowRunsApiService) GetWorkflowRunStepLog(ctx context.Context, workflowPath string, workflowRunNumber int32, workflowStepName string) WorkflowRunsApiGetWorkflowRunStepLogRequest {
	return WorkflowRunsApiGetWorkflowRunStepLogRequest{
		ApiService:        a,
		ctx:               ctx,
		workflowPath:      workflowPath,
		workflowRunNumber: workflowRunNumber,
		workflowStepName:  workflowStepName,
	}
}

// Execute executes the request
//  @return *os.File
func (a *WorkflowRunsApiService) GetWorkflowRunStepLogExecute(r WorkflowRunsApiGetWorkflowRunStepLogRequest) (**os.File, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue **os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowRunsApiService.GetWorkflowRunStepLog")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/workflows/{workflowPath}/runs/{workflowRunNumber}/steps/{workflowStepName}/logs"
	localVarPath = strings.Replace(localVarPath, "{"+"workflowPath"+"}", url.PathEscape(parameterToString(r.workflowPath, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workflowRunNumber"+"}", url.PathEscape(parameterToString(r.workflowRunNumber, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workflowStepName"+"}", url.PathEscape(parameterToString(r.workflowStepName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.workflowRunNumber < 1 {
		return localVarReturnValue, nil, reportError("workflowRunNumber must be greater than 1")
	}

	if r.follow != nil {
		localVarQueryParams.Add("follow", parameterToString(*r.follow, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/vnd.puppet.relay.v20200615+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GetAccessDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type WorkflowRunsApiGetWorkflowRunsRequest struct {
	ctx          context.Context
	ApiService   *WorkflowRunsApiService
	workflowPath string
}

func (r WorkflowRunsApiGetWorkflowRunsRequest) Execute() (*WorkflowRunsSummary, *http.Response, error) {
	return r.ApiService.GetWorkflowRunsExecute(r)
}

/*
GetWorkflowRuns Get all the runs of a workflow

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workflowPath Folder + Workflow name
 @return WorkflowRunsApiGetWorkflowRunsRequest
*/
func (a *WorkflowRunsApiService) GetWorkflowRuns(ctx context.Context, workflowPath string) WorkflowRunsApiGetWorkflowRunsRequest {
	return WorkflowRunsApiGetWorkflowRunsRequest{
		ApiService:   a,
		ctx:          ctx,
		workflowPath: workflowPath,
	}
}

// Execute executes the request
//  @return WorkflowRunsSummary
func (a *WorkflowRunsApiService) GetWorkflowRunsExecute(r WorkflowRunsApiGetWorkflowRunsRequest) (*WorkflowRunsSummary, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WorkflowRunsSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowRunsApiService.GetWorkflowRuns")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/workflows/{workflowPath}/runs"
	localVarPath = strings.Replace(localVarPath, "{"+"workflowPath"+"}", url.PathEscape(parameterToString(r.workflowPath, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.puppet.relay.v20200615+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GetAccessDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type WorkflowRunsApiPatchWorkflowRunRequest struct {
	ctx               context.Context
	ApiService        *WorkflowRunsApiService
	workflowPath      string
	workflowRunNumber int32
	updateWorkflowRun *UpdateWorkflowRun
}

// Update properties of workflow run
func (r WorkflowRunsApiPatchWorkflowRunRequest) UpdateWorkflowRun(updateWorkflowRun UpdateWorkflowRun) WorkflowRunsApiPatchWorkflowRunRequest {
	r.updateWorkflowRun = &updateWorkflowRun
	return r
}

func (r WorkflowRunsApiPatchWorkflowRunRequest) Execute() (*WorkflowRunEntity, *http.Response, error) {
	return r.ApiService.PatchWorkflowRunExecute(r)
}

/*
PatchWorkflowRun Update properties of a workflow

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workflowPath Folder + Workflow name
 @param workflowRunNumber Run number of the associated workflow
 @return WorkflowRunsApiPatchWorkflowRunRequest
*/
func (a *WorkflowRunsApiService) PatchWorkflowRun(ctx context.Context, workflowPath string, workflowRunNumber int32) WorkflowRunsApiPatchWorkflowRunRequest {
	return WorkflowRunsApiPatchWorkflowRunRequest{
		ApiService:        a,
		ctx:               ctx,
		workflowPath:      workflowPath,
		workflowRunNumber: workflowRunNumber,
	}
}

// Execute executes the request
//  @return WorkflowRunEntity
func (a *WorkflowRunsApiService) PatchWorkflowRunExecute(r WorkflowRunsApiPatchWorkflowRunRequest) (*WorkflowRunEntity, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WorkflowRunEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowRunsApiService.PatchWorkflowRun")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/workflows/{workflowPath}/runs/{workflowRunNumber}"
	localVarPath = strings.Replace(localVarPath, "{"+"workflowPath"+"}", url.PathEscape(parameterToString(r.workflowPath, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workflowRunNumber"+"}", url.PathEscape(parameterToString(r.workflowRunNumber, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.workflowRunNumber < 1 {
		return localVarReturnValue, nil, reportError("workflowRunNumber must be greater than 1")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.puppet.relay.v20200615+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.puppet.relay.v20200615+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateWorkflowRun
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GetAccessDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type WorkflowRunsApiPatchWorkflowRunStepRequest struct {
	ctx                   context.Context
	ApiService            *WorkflowRunsApiService
	workflowPath          string
	workflowRunNumber     int32
	workflowStepName      string
	updateWorkflowRunStep *UpdateWorkflowRunStep
}

// Update properties of workflow run step, e.g. rejecting an approval step. Omitted properties will be ignored.
func (r WorkflowRunsApiPatchWorkflowRunStepRequest) UpdateWorkflowRunStep(updateWorkflowRunStep UpdateWorkflowRunStep) WorkflowRunsApiPatchWorkflowRunStepRequest {
	r.updateWorkflowRunStep = &updateWorkflowRunStep
	return r
}

func (r WorkflowRunsApiPatchWorkflowRunStepRequest) Execute() (*WorkflowRunStep, *http.Response, error) {
	return r.ApiService.PatchWorkflowRunStepExecute(r)
}

/*
PatchWorkflowRunStep Update properties of a workflow run step

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workflowPath Folder + Workflow name
 @param workflowRunNumber Run number of the associated workflow
 @param workflowStepName The name of the step in the associated workflow
 @return WorkflowRunsApiPatchWorkflowRunStepRequest
*/
func (a *WorkflowRunsApiService) PatchWorkflowRunStep(ctx context.Context, workflowPath string, workflowRunNumber int32, workflowStepName string) WorkflowRunsApiPatchWorkflowRunStepRequest {
	return WorkflowRunsApiPatchWorkflowRunStepRequest{
		ApiService:        a,
		ctx:               ctx,
		workflowPath:      workflowPath,
		workflowRunNumber: workflowRunNumber,
		workflowStepName:  workflowStepName,
	}
}

// Execute executes the request
//  @return WorkflowRunStep
func (a *WorkflowRunsApiService) PatchWorkflowRunStepExecute(r WorkflowRunsApiPatchWorkflowRunStepRequest) (*WorkflowRunStep, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WorkflowRunStep
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowRunsApiService.PatchWorkflowRunStep")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/workflows/{workflowPath}/runs/{workflowRunNumber}/steps/{workflowStepName}"
	localVarPath = strings.Replace(localVarPath, "{"+"workflowPath"+"}", url.PathEscape(parameterToString(r.workflowPath, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workflowRunNumber"+"}", url.PathEscape(parameterToString(r.workflowRunNumber, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workflowStepName"+"}", url.PathEscape(parameterToString(r.workflowStepName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.workflowRunNumber < 1 {
		return localVarReturnValue, nil, reportError("workflowRunNumber must be greater than 1")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.puppet.relay.v20200615+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.puppet.relay.v20200615+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateWorkflowRunStep
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GetAccessDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type WorkflowRunsApiRunWorkflowRequest struct {
	ctx               context.Context
	ApiService        *WorkflowRunsApiService
	workflowPath      string
	createWorkflowRun *CreateWorkflowRun
}

// Workflow run to create
func (r WorkflowRunsApiRunWorkflowRequest) CreateWorkflowRun(createWorkflowRun CreateWorkflowRun) WorkflowRunsApiRunWorkflowRequest {
	r.createWorkflowRun = &createWorkflowRun
	return r
}

func (r WorkflowRunsApiRunWorkflowRequest) Execute() (*WorkflowRunEntity, *http.Response, error) {
	return r.ApiService.RunWorkflowExecute(r)
}

/*
RunWorkflow Runs the given workflow

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workflowPath Folder + Workflow name
 @return WorkflowRunsApiRunWorkflowRequest
*/
func (a *WorkflowRunsApiService) RunWorkflow(ctx context.Context, workflowPath string) WorkflowRunsApiRunWorkflowRequest {
	return WorkflowRunsApiRunWorkflowRequest{
		ApiService:   a,
		ctx:          ctx,
		workflowPath: workflowPath,
	}
}

// Execute executes the request
//  @return WorkflowRunEntity
func (a *WorkflowRunsApiService) RunWorkflowExecute(r WorkflowRunsApiRunWorkflowRequest) (*WorkflowRunEntity, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WorkflowRunEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowRunsApiService.RunWorkflow")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/workflows/{workflowPath}/runs"
	localVarPath = strings.Replace(localVarPath, "{"+"workflowPath"+"}", url.PathEscape(parameterToString(r.workflowPath, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.puppet.relay.v20200615+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.puppet.relay.v20200615+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createWorkflowRun
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GetAccessDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
