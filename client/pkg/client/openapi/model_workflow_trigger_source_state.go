/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// WorkflowTriggerSourceState - The state of a workflow trigger source
type WorkflowTriggerSourceState struct {
	PushWorkflowTriggerSourceState     *PushWorkflowTriggerSourceState
	ScheduleWorkflowTriggerSourceState *ScheduleWorkflowTriggerSourceState
	WebhookWorkflowTriggerSourceState  *WebhookWorkflowTriggerSourceState
}

// PushWorkflowTriggerSourceStateAsWorkflowTriggerSourceState is a convenience function that returns PushWorkflowTriggerSourceState wrapped in WorkflowTriggerSourceState
func PushWorkflowTriggerSourceStateAsWorkflowTriggerSourceState(v *PushWorkflowTriggerSourceState) WorkflowTriggerSourceState {
	return WorkflowTriggerSourceState{PushWorkflowTriggerSourceState: v}
}

// ScheduleWorkflowTriggerSourceStateAsWorkflowTriggerSourceState is a convenience function that returns ScheduleWorkflowTriggerSourceState wrapped in WorkflowTriggerSourceState
func ScheduleWorkflowTriggerSourceStateAsWorkflowTriggerSourceState(v *ScheduleWorkflowTriggerSourceState) WorkflowTriggerSourceState {
	return WorkflowTriggerSourceState{ScheduleWorkflowTriggerSourceState: v}
}

// WebhookWorkflowTriggerSourceStateAsWorkflowTriggerSourceState is a convenience function that returns WebhookWorkflowTriggerSourceState wrapped in WorkflowTriggerSourceState
func WebhookWorkflowTriggerSourceStateAsWorkflowTriggerSourceState(v *WebhookWorkflowTriggerSourceState) WorkflowTriggerSourceState {
	return WorkflowTriggerSourceState{WebhookWorkflowTriggerSourceState: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *WorkflowTriggerSourceState) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'PushWorkflowTriggerSourceState'
	if jsonDict["type"] == "PushWorkflowTriggerSourceState" {
		// try to unmarshal JSON data into PushWorkflowTriggerSourceState
		err = json.Unmarshal(data, &dst.PushWorkflowTriggerSourceState)
		if err == nil {
			return nil // data stored in dst.PushWorkflowTriggerSourceState, return on the first match
		} else {
			dst.PushWorkflowTriggerSourceState = nil
			return fmt.Errorf("Failed to unmarshal WorkflowTriggerSourceState as PushWorkflowTriggerSourceState: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ScheduleWorkflowTriggerSourceState'
	if jsonDict["type"] == "ScheduleWorkflowTriggerSourceState" {
		// try to unmarshal JSON data into ScheduleWorkflowTriggerSourceState
		err = json.Unmarshal(data, &dst.ScheduleWorkflowTriggerSourceState)
		if err == nil {
			return nil // data stored in dst.ScheduleWorkflowTriggerSourceState, return on the first match
		} else {
			dst.ScheduleWorkflowTriggerSourceState = nil
			return fmt.Errorf("Failed to unmarshal WorkflowTriggerSourceState as ScheduleWorkflowTriggerSourceState: %s", err.Error())
		}
	}

	// check if the discriminator value is 'WebhookWorkflowTriggerSourceState'
	if jsonDict["type"] == "WebhookWorkflowTriggerSourceState" {
		// try to unmarshal JSON data into WebhookWorkflowTriggerSourceState
		err = json.Unmarshal(data, &dst.WebhookWorkflowTriggerSourceState)
		if err == nil {
			return nil // data stored in dst.WebhookWorkflowTriggerSourceState, return on the first match
		} else {
			dst.WebhookWorkflowTriggerSourceState = nil
			return fmt.Errorf("Failed to unmarshal WorkflowTriggerSourceState as WebhookWorkflowTriggerSourceState: %s", err.Error())
		}
	}

	// check if the discriminator value is 'push'
	if jsonDict["type"] == "push" {
		// try to unmarshal JSON data into PushWorkflowTriggerSourceState
		err = json.Unmarshal(data, &dst.PushWorkflowTriggerSourceState)
		if err == nil {
			return nil // data stored in dst.PushWorkflowTriggerSourceState, return on the first match
		} else {
			dst.PushWorkflowTriggerSourceState = nil
			return fmt.Errorf("Failed to unmarshal WorkflowTriggerSourceState as PushWorkflowTriggerSourceState: %s", err.Error())
		}
	}

	// check if the discriminator value is 'schedule'
	if jsonDict["type"] == "schedule" {
		// try to unmarshal JSON data into ScheduleWorkflowTriggerSourceState
		err = json.Unmarshal(data, &dst.ScheduleWorkflowTriggerSourceState)
		if err == nil {
			return nil // data stored in dst.ScheduleWorkflowTriggerSourceState, return on the first match
		} else {
			dst.ScheduleWorkflowTriggerSourceState = nil
			return fmt.Errorf("Failed to unmarshal WorkflowTriggerSourceState as ScheduleWorkflowTriggerSourceState: %s", err.Error())
		}
	}

	// check if the discriminator value is 'webhook'
	if jsonDict["type"] == "webhook" {
		// try to unmarshal JSON data into WebhookWorkflowTriggerSourceState
		err = json.Unmarshal(data, &dst.WebhookWorkflowTriggerSourceState)
		if err == nil {
			return nil // data stored in dst.WebhookWorkflowTriggerSourceState, return on the first match
		} else {
			dst.WebhookWorkflowTriggerSourceState = nil
			return fmt.Errorf("Failed to unmarshal WorkflowTriggerSourceState as WebhookWorkflowTriggerSourceState: %s", err.Error())
		}
	}

	match := 0
	// try to unmarshal data into PushWorkflowTriggerSourceState
	err = json.Unmarshal(data, &dst.PushWorkflowTriggerSourceState)
	if err == nil {
		jsonPushWorkflowTriggerSourceState, err := json.Marshal(dst.PushWorkflowTriggerSourceState)
		if err == nil {
			if string(jsonPushWorkflowTriggerSourceState) == "" || string(jsonPushWorkflowTriggerSourceState) == "{}" { // empty struct
				dst.PushWorkflowTriggerSourceState = nil
			} else {
				match++
			}
		} else {
			dst.PushWorkflowTriggerSourceState = nil
		}
	} else {
		dst.PushWorkflowTriggerSourceState = nil
	}

	// try to unmarshal data into ScheduleWorkflowTriggerSourceState
	err = json.Unmarshal(data, &dst.ScheduleWorkflowTriggerSourceState)
	if err == nil {
		jsonScheduleWorkflowTriggerSourceState, err := json.Marshal(dst.ScheduleWorkflowTriggerSourceState)
		if err == nil {
			if string(jsonScheduleWorkflowTriggerSourceState) == "" || string(jsonScheduleWorkflowTriggerSourceState) == "{}" { // empty struct
				dst.ScheduleWorkflowTriggerSourceState = nil
			} else {
				match++
			}
		} else {
			dst.ScheduleWorkflowTriggerSourceState = nil
		}
	} else {
		dst.ScheduleWorkflowTriggerSourceState = nil
	}

	// try to unmarshal data into WebhookWorkflowTriggerSourceState
	err = json.Unmarshal(data, &dst.WebhookWorkflowTriggerSourceState)
	if err == nil {
		jsonWebhookWorkflowTriggerSourceState, err := json.Marshal(dst.WebhookWorkflowTriggerSourceState)
		if err == nil {
			if string(jsonWebhookWorkflowTriggerSourceState) == "" || string(jsonWebhookWorkflowTriggerSourceState) == "{}" { // empty struct
				dst.WebhookWorkflowTriggerSourceState = nil
			} else {
				match++
			}
		} else {
			dst.WebhookWorkflowTriggerSourceState = nil
		}
	} else {
		dst.WebhookWorkflowTriggerSourceState = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PushWorkflowTriggerSourceState = nil
		dst.ScheduleWorkflowTriggerSourceState = nil
		dst.WebhookWorkflowTriggerSourceState = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(WorkflowTriggerSourceState)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(WorkflowTriggerSourceState)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src WorkflowTriggerSourceState) MarshalJSON() ([]byte, error) {
	if src.PushWorkflowTriggerSourceState != nil {
		return json.Marshal(&src.PushWorkflowTriggerSourceState)
	}

	if src.ScheduleWorkflowTriggerSourceState != nil {
		return json.Marshal(&src.ScheduleWorkflowTriggerSourceState)
	}

	if src.WebhookWorkflowTriggerSourceState != nil {
		return json.Marshal(&src.WebhookWorkflowTriggerSourceState)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *WorkflowTriggerSourceState) GetActualInstance() interface{} {
	if obj.PushWorkflowTriggerSourceState != nil {
		return obj.PushWorkflowTriggerSourceState
	}

	if obj.ScheduleWorkflowTriggerSourceState != nil {
		return obj.ScheduleWorkflowTriggerSourceState
	}

	if obj.WebhookWorkflowTriggerSourceState != nil {
		return obj.WebhookWorkflowTriggerSourceState
	}

	// all schemas are nil
	return nil
}

type NullableWorkflowTriggerSourceState struct {
	value *WorkflowTriggerSourceState
	isSet bool
}

func (v NullableWorkflowTriggerSourceState) Get() *WorkflowTriggerSourceState {
	return v.value
}

func (v *NullableWorkflowTriggerSourceState) Set(val *WorkflowTriggerSourceState) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowTriggerSourceState) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowTriggerSourceState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowTriggerSourceState(val *WorkflowTriggerSourceState) *NullableWorkflowTriggerSourceState {
	return &NullableWorkflowTriggerSourceState{value: val, isSet: true}
}

func (v NullableWorkflowTriggerSourceState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowTriggerSourceState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
