/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// BinaryString - struct for BinaryString
type BinaryString struct {
	BinaryStringOneOf *BinaryStringOneOf
	String            *string
}

// BinaryStringOneOfAsBinaryString is a convenience function that returns BinaryStringOneOf wrapped in BinaryString
func BinaryStringOneOfAsBinaryString(v *BinaryStringOneOf) BinaryString {
	return BinaryString{
		BinaryStringOneOf: v,
	}
}

// stringAsBinaryString is a convenience function that returns string wrapped in BinaryString
func StringAsBinaryString(v *string) BinaryString {
	return BinaryString{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *BinaryString) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BinaryStringOneOf
	err = json.Unmarshal(data, &dst.BinaryStringOneOf)
	if err == nil {
		jsonBinaryStringOneOf, _ := json.Marshal(dst.BinaryStringOneOf)
		if string(jsonBinaryStringOneOf) == "{}" { // empty struct
			dst.BinaryStringOneOf = nil
		} else {
			match++
		}
	} else {
		dst.BinaryStringOneOf = nil
	}

	// try to unmarshal data into String
	err = json.Unmarshal(data, &dst.String)
	if err == nil {
		jsonstring, _ := json.Marshal(dst.String)
		if string(jsonstring) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BinaryStringOneOf = nil
		dst.String = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(BinaryString)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(BinaryString)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src BinaryString) MarshalJSON() ([]byte, error) {
	if src.BinaryStringOneOf != nil {
		return json.Marshal(&src.BinaryStringOneOf)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *BinaryString) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.BinaryStringOneOf != nil {
		return obj.BinaryStringOneOf
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableBinaryString struct {
	value *BinaryString
	isSet bool
}

func (v NullableBinaryString) Get() *BinaryString {
	return v.value
}

func (v *NullableBinaryString) Set(val *BinaryString) {
	v.value = val
	v.isSet = true
}

func (v NullableBinaryString) IsSet() bool {
	return v.isSet
}

func (v *NullableBinaryString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBinaryString(val *BinaryString) *NullableBinaryString {
	return &NullableBinaryString{value: val, isSet: true}
}

func (v NullableBinaryString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBinaryString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
