/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Account An organizational account
type Account struct {
	// Timestamp when the latest terms and conditions were accepted by an owner of this account
	AcceptedTermsAt NullableTime `json:"accepted_terms_at,omitempty"`
	// The latest version of the terms and conditions accepted by an owner of this account
	AcceptedTermsVersion NullableString `json:"accepted_terms_version,omitempty"`
	// The flags on the account
	Flags *[]string `json:"flags,omitempty"`
	// The unique identifier for the account
	Id string `json:"id"`
	// The name of the account
	Name string `json:"name"`
	// When the account plan is set to renew or expire
	PlanEnd NullableTime `json:"plan_end,omitempty"`
	// The account plan
	PlanType *string `json:"plan_type,omitempty"`
}

// NewAccount instantiates a new Account object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccount(id string, name string) *Account {
	this := Account{}
	this.Id = id
	this.Name = name
	return &this
}

// NewAccountWithDefaults instantiates a new Account object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountWithDefaults() *Account {
	this := Account{}
	return &this
}

// GetAcceptedTermsAt returns the AcceptedTermsAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Account) GetAcceptedTermsAt() time.Time {
	if o == nil || o.AcceptedTermsAt.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.AcceptedTermsAt.Get()
}

// GetAcceptedTermsAtOk returns a tuple with the AcceptedTermsAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Account) GetAcceptedTermsAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AcceptedTermsAt.Get(), o.AcceptedTermsAt.IsSet()
}

// HasAcceptedTermsAt returns a boolean if a field has been set.
func (o *Account) HasAcceptedTermsAt() bool {
	if o != nil && o.AcceptedTermsAt.IsSet() {
		return true
	}

	return false
}

// SetAcceptedTermsAt gets a reference to the given NullableTime and assigns it to the AcceptedTermsAt field.
func (o *Account) SetAcceptedTermsAt(v time.Time) {
	o.AcceptedTermsAt.Set(&v)
}
// SetAcceptedTermsAtNil sets the value for AcceptedTermsAt to be an explicit nil
func (o *Account) SetAcceptedTermsAtNil() {
	o.AcceptedTermsAt.Set(nil)
}

// UnsetAcceptedTermsAt ensures that no value is present for AcceptedTermsAt, not even an explicit nil
func (o *Account) UnsetAcceptedTermsAt() {
	o.AcceptedTermsAt.Unset()
}

// GetAcceptedTermsVersion returns the AcceptedTermsVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Account) GetAcceptedTermsVersion() string {
	if o == nil || o.AcceptedTermsVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.AcceptedTermsVersion.Get()
}

// GetAcceptedTermsVersionOk returns a tuple with the AcceptedTermsVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Account) GetAcceptedTermsVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AcceptedTermsVersion.Get(), o.AcceptedTermsVersion.IsSet()
}

// HasAcceptedTermsVersion returns a boolean if a field has been set.
func (o *Account) HasAcceptedTermsVersion() bool {
	if o != nil && o.AcceptedTermsVersion.IsSet() {
		return true
	}

	return false
}

// SetAcceptedTermsVersion gets a reference to the given NullableString and assigns it to the AcceptedTermsVersion field.
func (o *Account) SetAcceptedTermsVersion(v string) {
	o.AcceptedTermsVersion.Set(&v)
}
// SetAcceptedTermsVersionNil sets the value for AcceptedTermsVersion to be an explicit nil
func (o *Account) SetAcceptedTermsVersionNil() {
	o.AcceptedTermsVersion.Set(nil)
}

// UnsetAcceptedTermsVersion ensures that no value is present for AcceptedTermsVersion, not even an explicit nil
func (o *Account) UnsetAcceptedTermsVersion() {
	o.AcceptedTermsVersion.Unset()
}

// GetFlags returns the Flags field value if set, zero value otherwise.
func (o *Account) GetFlags() []string {
	if o == nil || o.Flags == nil {
		var ret []string
		return ret
	}
	return *o.Flags
}

// GetFlagsOk returns a tuple with the Flags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetFlagsOk() (*[]string, bool) {
	if o == nil || o.Flags == nil {
		return nil, false
	}
	return o.Flags, true
}

// HasFlags returns a boolean if a field has been set.
func (o *Account) HasFlags() bool {
	if o != nil && o.Flags != nil {
		return true
	}

	return false
}

// SetFlags gets a reference to the given []string and assigns it to the Flags field.
func (o *Account) SetFlags(v []string) {
	o.Flags = &v
}

// GetId returns the Id field value
func (o *Account) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Account) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Account) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Account) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Account) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Account) SetName(v string) {
	o.Name = v
}

// GetPlanEnd returns the PlanEnd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Account) GetPlanEnd() time.Time {
	if o == nil || o.PlanEnd.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.PlanEnd.Get()
}

// GetPlanEndOk returns a tuple with the PlanEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Account) GetPlanEndOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PlanEnd.Get(), o.PlanEnd.IsSet()
}

// HasPlanEnd returns a boolean if a field has been set.
func (o *Account) HasPlanEnd() bool {
	if o != nil && o.PlanEnd.IsSet() {
		return true
	}

	return false
}

// SetPlanEnd gets a reference to the given NullableTime and assigns it to the PlanEnd field.
func (o *Account) SetPlanEnd(v time.Time) {
	o.PlanEnd.Set(&v)
}
// SetPlanEndNil sets the value for PlanEnd to be an explicit nil
func (o *Account) SetPlanEndNil() {
	o.PlanEnd.Set(nil)
}

// UnsetPlanEnd ensures that no value is present for PlanEnd, not even an explicit nil
func (o *Account) UnsetPlanEnd() {
	o.PlanEnd.Unset()
}

// GetPlanType returns the PlanType field value if set, zero value otherwise.
func (o *Account) GetPlanType() string {
	if o == nil || o.PlanType == nil {
		var ret string
		return ret
	}
	return *o.PlanType
}

// GetPlanTypeOk returns a tuple with the PlanType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetPlanTypeOk() (*string, bool) {
	if o == nil || o.PlanType == nil {
		return nil, false
	}
	return o.PlanType, true
}

// HasPlanType returns a boolean if a field has been set.
func (o *Account) HasPlanType() bool {
	if o != nil && o.PlanType != nil {
		return true
	}

	return false
}

// SetPlanType gets a reference to the given string and assigns it to the PlanType field.
func (o *Account) SetPlanType(v string) {
	o.PlanType = &v
}

func (o Account) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AcceptedTermsAt.IsSet() {
		toSerialize["accepted_terms_at"] = o.AcceptedTermsAt.Get()
	}
	if o.AcceptedTermsVersion.IsSet() {
		toSerialize["accepted_terms_version"] = o.AcceptedTermsVersion.Get()
	}
	if o.Flags != nil {
		toSerialize["flags"] = o.Flags
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.PlanEnd.IsSet() {
		toSerialize["plan_end"] = o.PlanEnd.Get()
	}
	if o.PlanType != nil {
		toSerialize["plan_type"] = o.PlanType
	}
	return json.Marshal(toSerialize)
}

type NullableAccount struct {
	value *Account
	isSet bool
}

func (v NullableAccount) Get() *Account {
	return v.value
}

func (v *NullableAccount) Set(val *Account) {
	v.value = val
	v.isSet = true
}

func (v NullableAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccount(val *Account) *NullableAccount {
	return &NullableAccount{value: val, isSet: true}
}

func (v NullableAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


