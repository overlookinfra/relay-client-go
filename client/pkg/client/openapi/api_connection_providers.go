/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// ConnectionProvidersApiService ConnectionProvidersApi service
type ConnectionProvidersApiService service

type ConnectionProvidersApiGetConnectionProviderRequest struct {
	ctx                    context.Context
	ApiService             *ConnectionProvidersApiService
	connectionProviderName string
}

func (r ConnectionProvidersApiGetConnectionProviderRequest) Execute() (*ConnectionProviderEntity, *http.Response, error) {
	return r.ApiService.GetConnectionProviderExecute(r)
}

/*
GetConnectionProvider Retrieve information about a particular connection provider

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param connectionProviderName The name of a connection provider
 @return ConnectionProvidersApiGetConnectionProviderRequest
*/
func (a *ConnectionProvidersApiService) GetConnectionProvider(ctx context.Context, connectionProviderName string) ConnectionProvidersApiGetConnectionProviderRequest {
	return ConnectionProvidersApiGetConnectionProviderRequest{
		ApiService:             a,
		ctx:                    ctx,
		connectionProviderName: connectionProviderName,
	}
}

// Execute executes the request
//  @return ConnectionProviderEntity
func (a *ConnectionProvidersApiService) GetConnectionProviderExecute(r ConnectionProvidersApiGetConnectionProviderRequest) (*ConnectionProviderEntity, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ConnectionProviderEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectionProvidersApiService.GetConnectionProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/connection-providers/{connectionProviderName}"
	localVarPath = strings.Replace(localVarPath, "{"+"connectionProviderName"+"}", url.PathEscape(parameterToString(r.connectionProviderName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.puppet.relay.v20200615+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v InlineResponseDefault
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ConnectionProvidersApiStartConnectionProviderOAuth2AuthRequest struct {
	ctx                                      context.Context
	ApiService                               *ConnectionProvidersApiService
	connectionProviderName                   string
	startConnectionProviderOAuth2AuthRequest *StartConnectionProviderOAuth2AuthRequest
}

// Start an OAuth 2.0 authentication flow for a given connection type
func (r ConnectionProvidersApiStartConnectionProviderOAuth2AuthRequest) StartConnectionProviderOAuth2AuthRequest(startConnectionProviderOAuth2AuthRequest StartConnectionProviderOAuth2AuthRequest) ConnectionProvidersApiStartConnectionProviderOAuth2AuthRequest {
	r.startConnectionProviderOAuth2AuthRequest = &startConnectionProviderOAuth2AuthRequest
	return r
}

func (r ConnectionProvidersApiStartConnectionProviderOAuth2AuthRequest) Execute() (*InlineResponse2005, *http.Response, error) {
	return r.ApiService.StartConnectionProviderOAuth2AuthExecute(r)
}

/*
StartConnectionProviderOAuth2Auth Use the OAuth 2.0 authentication mechanism to start an authentication flow for this connection type

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param connectionProviderName The name of a connection provider
 @return ConnectionProvidersApiStartConnectionProviderOAuth2AuthRequest
*/
func (a *ConnectionProvidersApiService) StartConnectionProviderOAuth2Auth(ctx context.Context, connectionProviderName string) ConnectionProvidersApiStartConnectionProviderOAuth2AuthRequest {
	return ConnectionProvidersApiStartConnectionProviderOAuth2AuthRequest{
		ApiService:             a,
		ctx:                    ctx,
		connectionProviderName: connectionProviderName,
	}
}

// Execute executes the request
//  @return InlineResponse2005
func (a *ConnectionProvidersApiService) StartConnectionProviderOAuth2AuthExecute(r ConnectionProvidersApiStartConnectionProviderOAuth2AuthRequest) (*InlineResponse2005, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *InlineResponse2005
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ConnectionProvidersApiService.StartConnectionProviderOAuth2Auth")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/connection-providers/{connectionProviderName}/auth/oauth2"
	localVarPath = strings.Replace(localVarPath, "{"+"connectionProviderName"+"}", url.PathEscape(parameterToString(r.connectionProviderName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startConnectionProviderOAuth2AuthRequest == nil {
		return localVarReturnValue, nil, reportError("startConnectionProviderOAuth2AuthRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.puppet.relay.v20200615+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.puppet.relay.v20200615+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.startConnectionProviderOAuth2AuthRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v InlineResponseDefault
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
