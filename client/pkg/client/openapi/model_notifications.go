/*
 * Relay API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v20200615
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Notifications The response type for listing notifications
type Notifications struct {
	// A list of notifications
	Notifications *[]Notification `json:"notifications,omitempty"`
}

// NewNotifications instantiates a new Notifications object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotifications() *Notifications {
	this := Notifications{}
	return &this
}

// NewNotificationsWithDefaults instantiates a new Notifications object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationsWithDefaults() *Notifications {
	this := Notifications{}
	return &this
}

// GetNotifications returns the Notifications field value if set, zero value otherwise.
func (o *Notifications) GetNotifications() []Notification {
	if o == nil || o.Notifications == nil {
		var ret []Notification
		return ret
	}
	return *o.Notifications
}

// GetNotificationsOk returns a tuple with the Notifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Notifications) GetNotificationsOk() (*[]Notification, bool) {
	if o == nil || o.Notifications == nil {
		return nil, false
	}
	return o.Notifications, true
}

// HasNotifications returns a boolean if a field has been set.
func (o *Notifications) HasNotifications() bool {
	if o != nil && o.Notifications != nil {
		return true
	}

	return false
}

// SetNotifications gets a reference to the given []Notification and assigns it to the Notifications field.
func (o *Notifications) SetNotifications(v []Notification) {
	o.Notifications = &v
}

func (o Notifications) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Notifications != nil {
		toSerialize["notifications"] = o.Notifications
	}
	return json.Marshal(toSerialize)
}

type NullableNotifications struct {
	value *Notifications
	isSet bool
}

func (v NullableNotifications) Get() *Notifications {
	return v.value
}

func (v *NullableNotifications) Set(val *Notifications) {
	v.value = val
	v.isSet = true
}

func (v NullableNotifications) IsSet() bool {
	return v.isSet
}

func (v *NullableNotifications) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotifications(val *Notifications) *NullableNotifications {
	return &NullableNotifications{value: val, isSet: true}
}

func (v NullableNotifications) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotifications) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


