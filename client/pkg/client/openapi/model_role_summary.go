/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RoleSummary struct for RoleSummary
type RoleSummary struct {
	// The unique ID of this role
	Id *string `json:"id,omitempty"`
	// The name of the role
	Name *string `json:"name,omitempty"`
}

// NewRoleSummary instantiates a new RoleSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleSummary() *RoleSummary {
	this := RoleSummary{}
	return &this
}

// NewRoleSummaryWithDefaults instantiates a new RoleSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleSummaryWithDefaults() *RoleSummary {
	this := RoleSummary{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RoleSummary) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleSummary) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RoleSummary) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RoleSummary) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *RoleSummary) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleSummary) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *RoleSummary) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *RoleSummary) SetName(v string) {
	o.Name = &v
}

func (o RoleSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableRoleSummary struct {
	value *RoleSummary
	isSet bool
}

func (v NullableRoleSummary) Get() *RoleSummary {
	return v.value
}

func (v *NullableRoleSummary) Set(val *RoleSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleSummary(val *RoleSummary) *NullableRoleSummary {
	return &NullableRoleSummary{value: val, isSet: true}
}

func (v NullableRoleSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
