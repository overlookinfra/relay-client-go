/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EventRequest Required fields to create an event
type EventRequest struct {
	// The attribute data for this event
	Data *map[string]interface{} `json:"data,omitempty"`
	// An optional key for this event
	Key *string `json:"key,omitempty"`
	Source *EventSource `json:"source,omitempty"`
}

// NewEventRequest instantiates a new EventRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventRequest() *EventRequest {
	this := EventRequest{}
	return &this
}

// NewEventRequestWithDefaults instantiates a new EventRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventRequestWithDefaults() *EventRequest {
	this := EventRequest{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *EventRequest) GetData() map[string]interface{} {
	if o == nil || o.Data == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRequest) GetDataOk() (*map[string]interface{}, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *EventRequest) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *EventRequest) SetData(v map[string]interface{}) {
	o.Data = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *EventRequest) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRequest) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *EventRequest) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *EventRequest) SetKey(v string) {
	o.Key = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *EventRequest) GetSource() EventSource {
	if o == nil || o.Source == nil {
		var ret EventSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventRequest) GetSourceOk() (*EventSource, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *EventRequest) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given EventSource and assigns it to the Source field.
func (o *EventRequest) SetSource(v EventSource) {
	o.Source = &v
}

func (o EventRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	return json.Marshal(toSerialize)
}

type NullableEventRequest struct {
	value *EventRequest
	isSet bool
}

func (v NullableEventRequest) Get() *EventRequest {
	return v.value
}

func (v *NullableEventRequest) Set(val *EventRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEventRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEventRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventRequest(val *EventRequest) *NullableEventRequest {
	return &NullableEventRequest{value: val, isSet: true}
}

func (v NullableEventRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


