/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AcceptAccountTermsRequestUser Optional user data to be updated during terms acceptance
type AcceptAccountTermsRequestUser struct {
	// User name
	Name *string `json:"name,omitempty"`
	// User preferences
	Preferences map[string]interface{} `json:"preferences,omitempty"`
}

// NewAcceptAccountTermsRequestUser instantiates a new AcceptAccountTermsRequestUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAcceptAccountTermsRequestUser() *AcceptAccountTermsRequestUser {
	this := AcceptAccountTermsRequestUser{}
	return &this
}

// NewAcceptAccountTermsRequestUserWithDefaults instantiates a new AcceptAccountTermsRequestUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAcceptAccountTermsRequestUserWithDefaults() *AcceptAccountTermsRequestUser {
	this := AcceptAccountTermsRequestUser{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AcceptAccountTermsRequestUser) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcceptAccountTermsRequestUser) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AcceptAccountTermsRequestUser) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AcceptAccountTermsRequestUser) SetName(v string) {
	o.Name = &v
}

// GetPreferences returns the Preferences field value if set, zero value otherwise.
func (o *AcceptAccountTermsRequestUser) GetPreferences() map[string]interface{} {
	if o == nil || o.Preferences == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Preferences
}

// GetPreferencesOk returns a tuple with the Preferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcceptAccountTermsRequestUser) GetPreferencesOk() (map[string]interface{}, bool) {
	if o == nil || o.Preferences == nil {
		return nil, false
	}
	return o.Preferences, true
}

// HasPreferences returns a boolean if a field has been set.
func (o *AcceptAccountTermsRequestUser) HasPreferences() bool {
	if o != nil && o.Preferences != nil {
		return true
	}

	return false
}

// SetPreferences gets a reference to the given map[string]interface{} and assigns it to the Preferences field.
func (o *AcceptAccountTermsRequestUser) SetPreferences(v map[string]interface{}) {
	o.Preferences = v
}

func (o AcceptAccountTermsRequestUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Preferences != nil {
		toSerialize["preferences"] = o.Preferences
	}
	return json.Marshal(toSerialize)
}

type NullableAcceptAccountTermsRequestUser struct {
	value *AcceptAccountTermsRequestUser
	isSet bool
}

func (v NullableAcceptAccountTermsRequestUser) Get() *AcceptAccountTermsRequestUser {
	return v.value
}

func (v *NullableAcceptAccountTermsRequestUser) Set(val *AcceptAccountTermsRequestUser) {
	v.value = val
	v.isSet = true
}

func (v NullableAcceptAccountTermsRequestUser) IsSet() bool {
	return v.isSet
}

func (v *NullableAcceptAccountTermsRequestUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcceptAccountTermsRequestUser(val *AcceptAccountTermsRequestUser) *NullableAcceptAccountTermsRequestUser {
	return &NullableAcceptAccountTermsRequestUser{value: val, isSet: true}
}

func (v NullableAcceptAccountTermsRequestUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcceptAccountTermsRequestUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
