/*
 * Relay API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v20200615
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EventSourceTrigger A trigger event source
type EventSourceTrigger struct {
	Trigger WorkflowTriggerIdentifier `json:"trigger"`
	Type string `json:"type"`
	Workflow WorkflowIdentifier `json:"workflow"`
}

// NewEventSourceTrigger instantiates a new EventSourceTrigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventSourceTrigger(trigger WorkflowTriggerIdentifier, type_ string, workflow WorkflowIdentifier) *EventSourceTrigger {
	this := EventSourceTrigger{}
	this.Trigger = trigger
	this.Type = type_
	this.Workflow = workflow
	return &this
}

// NewEventSourceTriggerWithDefaults instantiates a new EventSourceTrigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventSourceTriggerWithDefaults() *EventSourceTrigger {
	this := EventSourceTrigger{}
	return &this
}

// GetTrigger returns the Trigger field value
func (o *EventSourceTrigger) GetTrigger() WorkflowTriggerIdentifier {
	if o == nil {
		var ret WorkflowTriggerIdentifier
		return ret
	}

	return o.Trigger
}

// GetTriggerOk returns a tuple with the Trigger field value
// and a boolean to check if the value has been set.
func (o *EventSourceTrigger) GetTriggerOk() (*WorkflowTriggerIdentifier, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Trigger, true
}

// SetTrigger sets field value
func (o *EventSourceTrigger) SetTrigger(v WorkflowTriggerIdentifier) {
	o.Trigger = v
}

// GetType returns the Type field value
func (o *EventSourceTrigger) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EventSourceTrigger) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EventSourceTrigger) SetType(v string) {
	o.Type = v
}

// GetWorkflow returns the Workflow field value
func (o *EventSourceTrigger) GetWorkflow() WorkflowIdentifier {
	if o == nil {
		var ret WorkflowIdentifier
		return ret
	}

	return o.Workflow
}

// GetWorkflowOk returns a tuple with the Workflow field value
// and a boolean to check if the value has been set.
func (o *EventSourceTrigger) GetWorkflowOk() (*WorkflowIdentifier, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Workflow, true
}

// SetWorkflow sets field value
func (o *EventSourceTrigger) SetWorkflow(v WorkflowIdentifier) {
	o.Workflow = v
}

func (o EventSourceTrigger) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["trigger"] = o.Trigger
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["workflow"] = o.Workflow
	}
	return json.Marshal(toSerialize)
}

type NullableEventSourceTrigger struct {
	value *EventSourceTrigger
	isSet bool
}

func (v NullableEventSourceTrigger) Get() *EventSourceTrigger {
	return v.value
}

func (v *NullableEventSourceTrigger) Set(val *EventSourceTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableEventSourceTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableEventSourceTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventSourceTrigger(val *EventSourceTrigger) *NullableEventSourceTrigger {
	return &NullableEventSourceTrigger{value: val, isSet: true}
}

func (v NullableEventSourceTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventSourceTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


