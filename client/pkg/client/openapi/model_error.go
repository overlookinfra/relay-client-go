/*
 * Relay API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v20200615
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Error An error
type Error struct {
	Arguments *map[string]map[string]interface{} `json:"arguments,omitempty"`
	Code *string `json:"code,omitempty"`
	Description *ErrorDescription `json:"description,omitempty"`
	Domain *string `json:"domain,omitempty"`
	Formatted *ErrorFormatted `json:"formatted,omitempty"`
	Items *map[string]Error `json:"items,omitempty"`
	Section *string `json:"section,omitempty"`
	Title *string `json:"title,omitempty"`
}

// NewError instantiates a new Error object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewError() *Error {
	this := Error{}
	return &this
}

// NewErrorWithDefaults instantiates a new Error object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorWithDefaults() *Error {
	this := Error{}
	return &this
}

// GetArguments returns the Arguments field value if set, zero value otherwise.
func (o *Error) GetArguments() map[string]map[string]interface{} {
	if o == nil || o.Arguments == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Arguments
}

// GetArgumentsOk returns a tuple with the Arguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error) GetArgumentsOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.Arguments == nil {
		return nil, false
	}
	return o.Arguments, true
}

// HasArguments returns a boolean if a field has been set.
func (o *Error) HasArguments() bool {
	if o != nil && o.Arguments != nil {
		return true
	}

	return false
}

// SetArguments gets a reference to the given map[string]map[string]interface{} and assigns it to the Arguments field.
func (o *Error) SetArguments(v map[string]map[string]interface{}) {
	o.Arguments = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Error) GetCode() string {
	if o == nil || o.Code == nil {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error) GetCodeOk() (*string, bool) {
	if o == nil || o.Code == nil {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Error) HasCode() bool {
	if o != nil && o.Code != nil {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Error) SetCode(v string) {
	o.Code = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Error) GetDescription() ErrorDescription {
	if o == nil || o.Description == nil {
		var ret ErrorDescription
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error) GetDescriptionOk() (*ErrorDescription, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Error) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given ErrorDescription and assigns it to the Description field.
func (o *Error) SetDescription(v ErrorDescription) {
	o.Description = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *Error) GetDomain() string {
	if o == nil || o.Domain == nil {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error) GetDomainOk() (*string, bool) {
	if o == nil || o.Domain == nil {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *Error) HasDomain() bool {
	if o != nil && o.Domain != nil {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *Error) SetDomain(v string) {
	o.Domain = &v
}

// GetFormatted returns the Formatted field value if set, zero value otherwise.
func (o *Error) GetFormatted() ErrorFormatted {
	if o == nil || o.Formatted == nil {
		var ret ErrorFormatted
		return ret
	}
	return *o.Formatted
}

// GetFormattedOk returns a tuple with the Formatted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error) GetFormattedOk() (*ErrorFormatted, bool) {
	if o == nil || o.Formatted == nil {
		return nil, false
	}
	return o.Formatted, true
}

// HasFormatted returns a boolean if a field has been set.
func (o *Error) HasFormatted() bool {
	if o != nil && o.Formatted != nil {
		return true
	}

	return false
}

// SetFormatted gets a reference to the given ErrorFormatted and assigns it to the Formatted field.
func (o *Error) SetFormatted(v ErrorFormatted) {
	o.Formatted = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *Error) GetItems() map[string]Error {
	if o == nil || o.Items == nil {
		var ret map[string]Error
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error) GetItemsOk() (*map[string]Error, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *Error) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given map[string]Error and assigns it to the Items field.
func (o *Error) SetItems(v map[string]Error) {
	o.Items = &v
}

// GetSection returns the Section field value if set, zero value otherwise.
func (o *Error) GetSection() string {
	if o == nil || o.Section == nil {
		var ret string
		return ret
	}
	return *o.Section
}

// GetSectionOk returns a tuple with the Section field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error) GetSectionOk() (*string, bool) {
	if o == nil || o.Section == nil {
		return nil, false
	}
	return o.Section, true
}

// HasSection returns a boolean if a field has been set.
func (o *Error) HasSection() bool {
	if o != nil && o.Section != nil {
		return true
	}

	return false
}

// SetSection gets a reference to the given string and assigns it to the Section field.
func (o *Error) SetSection(v string) {
	o.Section = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Error) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Error) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Error) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Error) SetTitle(v string) {
	o.Title = &v
}

func (o Error) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Arguments != nil {
		toSerialize["arguments"] = o.Arguments
	}
	if o.Code != nil {
		toSerialize["code"] = o.Code
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Domain != nil {
		toSerialize["domain"] = o.Domain
	}
	if o.Formatted != nil {
		toSerialize["formatted"] = o.Formatted
	}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.Section != nil {
		toSerialize["section"] = o.Section
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	return json.Marshal(toSerialize)
}

type NullableError struct {
	value *Error
	isSet bool
}

func (v NullableError) Get() *Error {
	return v.value
}

func (v *NullableError) Set(val *Error) {
	v.value = val
	v.isSet = true
}

func (v NullableError) IsSet() bool {
	return v.isSet
}

func (v *NullableError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableError(val *Error) *NullableError {
	return &NullableError{value: val, isSet: true}
}

func (v NullableError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


