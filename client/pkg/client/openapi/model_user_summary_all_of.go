/*
 * Relay API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v20200615
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserSummaryAllOf The information about an account user
type UserSummaryAllOf struct {
	// User email
	Email *string `json:"email,omitempty"`
	// User name
	Name string `json:"name"`
}

// NewUserSummaryAllOf instantiates a new UserSummaryAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSummaryAllOf(name string) *UserSummaryAllOf {
	this := UserSummaryAllOf{}
	this.Name = name
	return &this
}

// NewUserSummaryAllOfWithDefaults instantiates a new UserSummaryAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSummaryAllOfWithDefaults() *UserSummaryAllOf {
	this := UserSummaryAllOf{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserSummaryAllOf) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSummaryAllOf) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserSummaryAllOf) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserSummaryAllOf) SetEmail(v string) {
	o.Email = &v
}

// GetName returns the Name field value
func (o *UserSummaryAllOf) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UserSummaryAllOf) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UserSummaryAllOf) SetName(v string) {
	o.Name = v
}

func (o UserSummaryAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableUserSummaryAllOf struct {
	value *UserSummaryAllOf
	isSet bool
}

func (v NullableUserSummaryAllOf) Get() *UserSummaryAllOf {
	return v.value
}

func (v *NullableUserSummaryAllOf) Set(val *UserSummaryAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSummaryAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSummaryAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSummaryAllOf(val *UserSummaryAllOf) *NullableUserSummaryAllOf {
	return &NullableUserSummaryAllOf{value: val, isSet: true}
}

func (v NullableUserSummaryAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSummaryAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


