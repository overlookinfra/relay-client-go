/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ConnectionProviderCapability A capability to enable for a connection
type ConnectionProviderCapability string

// List of ConnectionProviderCapability
const (
	SOURCE_CONTROL  ConnectionProviderCapability = "source-control"
	WORKFLOW_ENGINE ConnectionProviderCapability = "workflow-engine"
)

var allowedConnectionProviderCapabilityEnumValues = []ConnectionProviderCapability{
	"source-control",
	"workflow-engine",
}

func (v *ConnectionProviderCapability) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectionProviderCapability(value)
	for _, existing := range allowedConnectionProviderCapabilityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectionProviderCapability", value)
}

// NewConnectionProviderCapabilityFromValue returns a pointer to a valid ConnectionProviderCapability
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectionProviderCapabilityFromValue(v string) (*ConnectionProviderCapability, error) {
	ev := ConnectionProviderCapability(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectionProviderCapability: valid values are %v", v, allowedConnectionProviderCapabilityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectionProviderCapability) IsValid() bool {
	for _, existing := range allowedConnectionProviderCapabilityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectionProviderCapability value
func (v ConnectionProviderCapability) Ptr() *ConnectionProviderCapability {
	return &v
}

type NullableConnectionProviderCapability struct {
	value *ConnectionProviderCapability
	isSet bool
}

func (v NullableConnectionProviderCapability) Get() *ConnectionProviderCapability {
	return v.value
}

func (v *NullableConnectionProviderCapability) Set(val *ConnectionProviderCapability) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionProviderCapability) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionProviderCapability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionProviderCapability(val *ConnectionProviderCapability) *NullableConnectionProviderCapability {
	return &NullableConnectionProviderCapability{value: val, isSet: true}
}

func (v NullableConnectionProviderCapability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionProviderCapability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
