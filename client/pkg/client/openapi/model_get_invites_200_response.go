/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GetInvites200Response Response type for all pending and/or accepted invites for this account
type GetInvites200Response struct {
	// A list of invites
	Invites []Invite `json:"invites,omitempty"`
}

// NewGetInvites200Response instantiates a new GetInvites200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetInvites200Response() *GetInvites200Response {
	this := GetInvites200Response{}
	return &this
}

// NewGetInvites200ResponseWithDefaults instantiates a new GetInvites200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetInvites200ResponseWithDefaults() *GetInvites200Response {
	this := GetInvites200Response{}
	return &this
}

// GetInvites returns the Invites field value if set, zero value otherwise.
func (o *GetInvites200Response) GetInvites() []Invite {
	if o == nil || o.Invites == nil {
		var ret []Invite
		return ret
	}
	return o.Invites
}

// GetInvitesOk returns a tuple with the Invites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetInvites200Response) GetInvitesOk() ([]Invite, bool) {
	if o == nil || o.Invites == nil {
		return nil, false
	}
	return o.Invites, true
}

// HasInvites returns a boolean if a field has been set.
func (o *GetInvites200Response) HasInvites() bool {
	if o != nil && o.Invites != nil {
		return true
	}

	return false
}

// SetInvites gets a reference to the given []Invite and assigns it to the Invites field.
func (o *GetInvites200Response) SetInvites(v []Invite) {
	o.Invites = v
}

func (o GetInvites200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Invites != nil {
		toSerialize["invites"] = o.Invites
	}
	return json.Marshal(toSerialize)
}

type NullableGetInvites200Response struct {
	value *GetInvites200Response
	isSet bool
}

func (v NullableGetInvites200Response) Get() *GetInvites200Response {
	return v.value
}

func (v *NullableGetInvites200Response) Set(val *GetInvites200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetInvites200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetInvites200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetInvites200Response(val *GetInvites200Response) *NullableGetInvites200Response {
	return &NullableGetInvites200Response{value: val, isSet: true}
}

func (v NullableGetInvites200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetInvites200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
