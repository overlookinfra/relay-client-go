/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateAccountRequestUser The new account admin user information
type CreateAccountRequestUser struct {
	// User email
	Email string `json:"email"`
	// User name
	Name string `json:"name"`
	// User preferences
	Preferences map[string]interface{} `json:"preferences,omitempty"`
}

// NewCreateAccountRequestUser instantiates a new CreateAccountRequestUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAccountRequestUser(email string, name string) *CreateAccountRequestUser {
	this := CreateAccountRequestUser{}
	this.Email = email
	this.Name = name
	return &this
}

// NewCreateAccountRequestUserWithDefaults instantiates a new CreateAccountRequestUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAccountRequestUserWithDefaults() *CreateAccountRequestUser {
	this := CreateAccountRequestUser{}
	return &this
}

// GetEmail returns the Email field value
func (o *CreateAccountRequestUser) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *CreateAccountRequestUser) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *CreateAccountRequestUser) SetEmail(v string) {
	o.Email = v
}

// GetName returns the Name field value
func (o *CreateAccountRequestUser) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateAccountRequestUser) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateAccountRequestUser) SetName(v string) {
	o.Name = v
}

// GetPreferences returns the Preferences field value if set, zero value otherwise.
func (o *CreateAccountRequestUser) GetPreferences() map[string]interface{} {
	if o == nil || o.Preferences == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Preferences
}

// GetPreferencesOk returns a tuple with the Preferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAccountRequestUser) GetPreferencesOk() (map[string]interface{}, bool) {
	if o == nil || o.Preferences == nil {
		return nil, false
	}
	return o.Preferences, true
}

// HasPreferences returns a boolean if a field has been set.
func (o *CreateAccountRequestUser) HasPreferences() bool {
	if o != nil && o.Preferences != nil {
		return true
	}

	return false
}

// SetPreferences gets a reference to the given map[string]interface{} and assigns it to the Preferences field.
func (o *CreateAccountRequestUser) SetPreferences(v map[string]interface{}) {
	o.Preferences = v
}

func (o CreateAccountRequestUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Preferences != nil {
		toSerialize["preferences"] = o.Preferences
	}
	return json.Marshal(toSerialize)
}

type NullableCreateAccountRequestUser struct {
	value *CreateAccountRequestUser
	isSet bool
}

func (v NullableCreateAccountRequestUser) Get() *CreateAccountRequestUser {
	return v.value
}

func (v *NullableCreateAccountRequestUser) Set(val *CreateAccountRequestUser) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAccountRequestUser) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAccountRequestUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAccountRequestUser(val *CreateAccountRequestUser) *NullableCreateAccountRequestUser {
	return &NullableCreateAccountRequestUser{value: val, isSet: true}
}

func (v NullableCreateAccountRequestUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAccountRequestUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
