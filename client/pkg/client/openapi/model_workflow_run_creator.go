/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// WorkflowRunCreator - struct for WorkflowRunCreator
type WorkflowRunCreator struct {
	EventWorkflowRunCreator *EventWorkflowRunCreator
	UserWorkflowRunCreator  *UserWorkflowRunCreator
}

// EventWorkflowRunCreatorAsWorkflowRunCreator is a convenience function that returns EventWorkflowRunCreator wrapped in WorkflowRunCreator
func EventWorkflowRunCreatorAsWorkflowRunCreator(v *EventWorkflowRunCreator) WorkflowRunCreator {
	return WorkflowRunCreator{
		EventWorkflowRunCreator: v,
	}
}

// UserWorkflowRunCreatorAsWorkflowRunCreator is a convenience function that returns UserWorkflowRunCreator wrapped in WorkflowRunCreator
func UserWorkflowRunCreatorAsWorkflowRunCreator(v *UserWorkflowRunCreator) WorkflowRunCreator {
	return WorkflowRunCreator{
		UserWorkflowRunCreator: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *WorkflowRunCreator) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'EventWorkflowRunCreator'
	if jsonDict["type"] == "EventWorkflowRunCreator" {
		// try to unmarshal JSON data into EventWorkflowRunCreator
		err = json.Unmarshal(data, &dst.EventWorkflowRunCreator)
		if err == nil {
			return nil // data stored in dst.EventWorkflowRunCreator, return on the first match
		} else {
			dst.EventWorkflowRunCreator = nil
			return fmt.Errorf("Failed to unmarshal WorkflowRunCreator as EventWorkflowRunCreator: %s", err.Error())
		}
	}

	// check if the discriminator value is 'UserWorkflowRunCreator'
	if jsonDict["type"] == "UserWorkflowRunCreator" {
		// try to unmarshal JSON data into UserWorkflowRunCreator
		err = json.Unmarshal(data, &dst.UserWorkflowRunCreator)
		if err == nil {
			return nil // data stored in dst.UserWorkflowRunCreator, return on the first match
		} else {
			dst.UserWorkflowRunCreator = nil
			return fmt.Errorf("Failed to unmarshal WorkflowRunCreator as UserWorkflowRunCreator: %s", err.Error())
		}
	}

	// check if the discriminator value is 'event'
	if jsonDict["type"] == "event" {
		// try to unmarshal JSON data into EventWorkflowRunCreator
		err = json.Unmarshal(data, &dst.EventWorkflowRunCreator)
		if err == nil {
			return nil // data stored in dst.EventWorkflowRunCreator, return on the first match
		} else {
			dst.EventWorkflowRunCreator = nil
			return fmt.Errorf("Failed to unmarshal WorkflowRunCreator as EventWorkflowRunCreator: %s", err.Error())
		}
	}

	// check if the discriminator value is 'user'
	if jsonDict["type"] == "user" {
		// try to unmarshal JSON data into UserWorkflowRunCreator
		err = json.Unmarshal(data, &dst.UserWorkflowRunCreator)
		if err == nil {
			return nil // data stored in dst.UserWorkflowRunCreator, return on the first match
		} else {
			dst.UserWorkflowRunCreator = nil
			return fmt.Errorf("Failed to unmarshal WorkflowRunCreator as UserWorkflowRunCreator: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src WorkflowRunCreator) MarshalJSON() ([]byte, error) {
	if src.EventWorkflowRunCreator != nil {
		return json.Marshal(&src.EventWorkflowRunCreator)
	}

	if src.UserWorkflowRunCreator != nil {
		return json.Marshal(&src.UserWorkflowRunCreator)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *WorkflowRunCreator) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.EventWorkflowRunCreator != nil {
		return obj.EventWorkflowRunCreator
	}

	if obj.UserWorkflowRunCreator != nil {
		return obj.UserWorkflowRunCreator
	}

	// all schemas are nil
	return nil
}

type NullableWorkflowRunCreator struct {
	value *WorkflowRunCreator
	isSet bool
}

func (v NullableWorkflowRunCreator) Get() *WorkflowRunCreator {
	return v.value
}

func (v *NullableWorkflowRunCreator) Set(val *WorkflowRunCreator) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowRunCreator) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowRunCreator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowRunCreator(val *WorkflowRunCreator) *NullableWorkflowRunCreator {
	return &NullableWorkflowRunCreator{value: val, isSet: true}
}

func (v NullableWorkflowRunCreator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowRunCreator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
