/*
 * Relay API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v20200615
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ConnectionReference The signature of a connection
type ConnectionReference struct {
	// A descriptive connection name
	Name string `json:"name"`
	// This connection's type identifier
	Type string `json:"type"`
}

// NewConnectionReference instantiates a new ConnectionReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionReference(name string, type_ string) *ConnectionReference {
	this := ConnectionReference{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewConnectionReferenceWithDefaults instantiates a new ConnectionReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionReferenceWithDefaults() *ConnectionReference {
	this := ConnectionReference{}
	return &this
}

// GetName returns the Name field value
func (o *ConnectionReference) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConnectionReference) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConnectionReference) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *ConnectionReference) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ConnectionReference) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ConnectionReference) SetType(v string) {
	o.Type = v
}

func (o ConnectionReference) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableConnectionReference struct {
	value *ConnectionReference
	isSet bool
}

func (v NullableConnectionReference) Get() *ConnectionReference {
	return v.value
}

func (v *NullableConnectionReference) Set(val *ConnectionReference) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionReference) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionReference(val *ConnectionReference) *NullableConnectionReference {
	return &NullableConnectionReference{value: val, isSet: true}
}

func (v NullableConnectionReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


