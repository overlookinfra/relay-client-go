/*
 * Relay API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v20200615
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BinaryStringOneOf A Base64-encoded binary string
type BinaryStringOneOf struct {
	// The identifier that this is a Base64-encoded string
	Encoding string `json:"$encoding"`
	// The Base64-encoded content
	Data string `json:"data"`
}

// NewBinaryStringOneOf instantiates a new BinaryStringOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBinaryStringOneOf(encoding string, data string) *BinaryStringOneOf {
	this := BinaryStringOneOf{}
	this.Encoding = encoding
	this.Data = data
	return &this
}

// NewBinaryStringOneOfWithDefaults instantiates a new BinaryStringOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBinaryStringOneOfWithDefaults() *BinaryStringOneOf {
	this := BinaryStringOneOf{}
	return &this
}

// GetEncoding returns the Encoding field value
func (o *BinaryStringOneOf) GetEncoding() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Encoding
}

// GetEncodingOk returns a tuple with the Encoding field value
// and a boolean to check if the value has been set.
func (o *BinaryStringOneOf) GetEncodingOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Encoding, true
}

// SetEncoding sets field value
func (o *BinaryStringOneOf) SetEncoding(v string) {
	o.Encoding = v
}

// GetData returns the Data field value
func (o *BinaryStringOneOf) GetData() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *BinaryStringOneOf) GetDataOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *BinaryStringOneOf) SetData(v string) {
	o.Data = v
}

func (o BinaryStringOneOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["$encoding"] = o.Encoding
	}
	if true {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableBinaryStringOneOf struct {
	value *BinaryStringOneOf
	isSet bool
}

func (v NullableBinaryStringOneOf) Get() *BinaryStringOneOf {
	return v.value
}

func (v *NullableBinaryStringOneOf) Set(val *BinaryStringOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBinaryStringOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBinaryStringOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBinaryStringOneOf(val *BinaryStringOneOf) *NullableBinaryStringOneOf {
	return &NullableBinaryStringOneOf{value: val, isSet: true}
}

func (v NullableBinaryStringOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBinaryStringOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


