/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// WorkflowSecretsApiService WorkflowSecretsApi service
type WorkflowSecretsApiService service

type WorkflowSecretsApiCreateWorkflowSecretRequest struct {
	ctx            context.Context
	ApiService     *WorkflowSecretsApiService
	workflowPath   string
	workflowSecret *WorkflowSecret
}

// Secret to name value pair to create
func (r WorkflowSecretsApiCreateWorkflowSecretRequest) WorkflowSecret(workflowSecret WorkflowSecret) WorkflowSecretsApiCreateWorkflowSecretRequest {
	r.workflowSecret = &workflowSecret
	return r
}

func (r WorkflowSecretsApiCreateWorkflowSecretRequest) Execute() (*CreateWorkflowSecret201Response, *http.Response, error) {
	return r.ApiService.CreateWorkflowSecretExecute(r)
}

/*
CreateWorkflowSecret Add a new secret to the given workflow

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workflowPath Folder + Workflow name
 @return WorkflowSecretsApiCreateWorkflowSecretRequest
*/
func (a *WorkflowSecretsApiService) CreateWorkflowSecret(ctx context.Context, workflowPath string) WorkflowSecretsApiCreateWorkflowSecretRequest {
	return WorkflowSecretsApiCreateWorkflowSecretRequest{
		ApiService:   a,
		ctx:          ctx,
		workflowPath: workflowPath,
	}
}

// Execute executes the request
//  @return CreateWorkflowSecret201Response
func (a *WorkflowSecretsApiService) CreateWorkflowSecretExecute(r WorkflowSecretsApiCreateWorkflowSecretRequest) (*CreateWorkflowSecret201Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateWorkflowSecret201Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowSecretsApiService.CreateWorkflowSecret")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/workflows/{workflowPath}/secrets"
	localVarPath = strings.Replace(localVarPath, "{"+"workflowPath"+"}", url.PathEscape(parameterToString(r.workflowPath, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.workflowSecret == nil {
		return localVarReturnValue, nil, reportError("workflowSecret is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.puppet.relay.v20200615+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.puppet.relay.v20200615+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.workflowSecret
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GetAccessDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type WorkflowSecretsApiDeleteWorkflowSecretRequest struct {
	ctx                context.Context
	ApiService         *WorkflowSecretsApiService
	workflowPath       string
	workflowSecretName string
}

func (r WorkflowSecretsApiDeleteWorkflowSecretRequest) Execute() (*DeletedResource, *http.Response, error) {
	return r.ApiService.DeleteWorkflowSecretExecute(r)
}

/*
DeleteWorkflowSecret Delete the secret associated with the given workflow and secret name

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workflowPath Folder + Workflow name
 @param workflowSecretName The name of a workflow secret
 @return WorkflowSecretsApiDeleteWorkflowSecretRequest
*/
func (a *WorkflowSecretsApiService) DeleteWorkflowSecret(ctx context.Context, workflowPath string, workflowSecretName string) WorkflowSecretsApiDeleteWorkflowSecretRequest {
	return WorkflowSecretsApiDeleteWorkflowSecretRequest{
		ApiService:         a,
		ctx:                ctx,
		workflowPath:       workflowPath,
		workflowSecretName: workflowSecretName,
	}
}

// Execute executes the request
//  @return DeletedResource
func (a *WorkflowSecretsApiService) DeleteWorkflowSecretExecute(r WorkflowSecretsApiDeleteWorkflowSecretRequest) (*DeletedResource, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeletedResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowSecretsApiService.DeleteWorkflowSecret")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/workflows/{workflowPath}/secrets/{workflowSecretName}"
	localVarPath = strings.Replace(localVarPath, "{"+"workflowPath"+"}", url.PathEscape(parameterToString(r.workflowPath, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workflowSecretName"+"}", url.PathEscape(parameterToString(r.workflowSecretName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.puppet.relay.v20200615+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GetAccessDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type WorkflowSecretsApiListWorkflowSecretsRequest struct {
	ctx          context.Context
	ApiService   *WorkflowSecretsApiService
	workflowPath string
}

func (r WorkflowSecretsApiListWorkflowSecretsRequest) Execute() (*WorkflowSecretsSummary, *http.Response, error) {
	return r.ApiService.ListWorkflowSecretsExecute(r)
}

/*
ListWorkflowSecrets Get all secrets associated with the given workflow

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workflowPath Folder + Workflow name
 @return WorkflowSecretsApiListWorkflowSecretsRequest
*/
func (a *WorkflowSecretsApiService) ListWorkflowSecrets(ctx context.Context, workflowPath string) WorkflowSecretsApiListWorkflowSecretsRequest {
	return WorkflowSecretsApiListWorkflowSecretsRequest{
		ApiService:   a,
		ctx:          ctx,
		workflowPath: workflowPath,
	}
}

// Execute executes the request
//  @return WorkflowSecretsSummary
func (a *WorkflowSecretsApiService) ListWorkflowSecretsExecute(r WorkflowSecretsApiListWorkflowSecretsRequest) (*WorkflowSecretsSummary, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *WorkflowSecretsSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowSecretsApiService.ListWorkflowSecrets")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/workflows/{workflowPath}/secrets"
	localVarPath = strings.Replace(localVarPath, "{"+"workflowPath"+"}", url.PathEscape(parameterToString(r.workflowPath, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.puppet.relay.v20200615+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GetAccessDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type WorkflowSecretsApiUpdateWorkflowSecretRequest struct {
	ctx                 context.Context
	ApiService          *WorkflowSecretsApiService
	workflowPath        string
	workflowSecretName  string
	workflowSecretValue *WorkflowSecretValue
}

// The new secret value
func (r WorkflowSecretsApiUpdateWorkflowSecretRequest) WorkflowSecretValue(workflowSecretValue WorkflowSecretValue) WorkflowSecretsApiUpdateWorkflowSecretRequest {
	r.workflowSecretValue = &workflowSecretValue
	return r
}

func (r WorkflowSecretsApiUpdateWorkflowSecretRequest) Execute() (*UpdateWorkflowSecret200Response, *http.Response, error) {
	return r.ApiService.UpdateWorkflowSecretExecute(r)
}

/*
UpdateWorkflowSecret Update the secret associated with the given workflow and secret name

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param workflowPath Folder + Workflow name
 @param workflowSecretName The name of a workflow secret
 @return WorkflowSecretsApiUpdateWorkflowSecretRequest
*/
func (a *WorkflowSecretsApiService) UpdateWorkflowSecret(ctx context.Context, workflowPath string, workflowSecretName string) WorkflowSecretsApiUpdateWorkflowSecretRequest {
	return WorkflowSecretsApiUpdateWorkflowSecretRequest{
		ApiService:         a,
		ctx:                ctx,
		workflowPath:       workflowPath,
		workflowSecretName: workflowSecretName,
	}
}

// Execute executes the request
//  @return UpdateWorkflowSecret200Response
func (a *WorkflowSecretsApiService) UpdateWorkflowSecretExecute(r WorkflowSecretsApiUpdateWorkflowSecretRequest) (*UpdateWorkflowSecret200Response, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *UpdateWorkflowSecret200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowSecretsApiService.UpdateWorkflowSecret")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/workflows/{workflowPath}/secrets/{workflowSecretName}"
	localVarPath = strings.Replace(localVarPath, "{"+"workflowPath"+"}", url.PathEscape(parameterToString(r.workflowPath, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workflowSecretName"+"}", url.PathEscape(parameterToString(r.workflowSecretName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.workflowSecretValue == nil {
		return localVarReturnValue, nil, reportError("workflowSecretValue is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/vnd.puppet.relay.v20200615+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.puppet.relay.v20200615+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.workflowSecretValue
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GetAccessDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
