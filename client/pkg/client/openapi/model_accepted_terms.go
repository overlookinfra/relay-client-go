/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// AcceptedTerms Accepted terms and conditions
type AcceptedTerms struct {
	// Timestamp when terms and conditions were accepted by an owner of this account
	AcceptedTermsAt time.Time `json:"accepted_terms_at"`
	// The version of the terms and conditions that was accepted
	Version string `json:"version"`
}

// NewAcceptedTerms instantiates a new AcceptedTerms object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAcceptedTerms(acceptedTermsAt time.Time, version string) *AcceptedTerms {
	this := AcceptedTerms{}
	this.AcceptedTermsAt = acceptedTermsAt
	this.Version = version
	return &this
}

// NewAcceptedTermsWithDefaults instantiates a new AcceptedTerms object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAcceptedTermsWithDefaults() *AcceptedTerms {
	this := AcceptedTerms{}
	return &this
}

// GetAcceptedTermsAt returns the AcceptedTermsAt field value
func (o *AcceptedTerms) GetAcceptedTermsAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.AcceptedTermsAt
}

// GetAcceptedTermsAtOk returns a tuple with the AcceptedTermsAt field value
// and a boolean to check if the value has been set.
func (o *AcceptedTerms) GetAcceptedTermsAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AcceptedTermsAt, true
}

// SetAcceptedTermsAt sets field value
func (o *AcceptedTerms) SetAcceptedTermsAt(v time.Time) {
	o.AcceptedTermsAt = v
}

// GetVersion returns the Version field value
func (o *AcceptedTerms) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *AcceptedTerms) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *AcceptedTerms) SetVersion(v string) {
	o.Version = v
}

func (o AcceptedTerms) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["accepted_terms_at"] = o.AcceptedTermsAt
	}
	if true {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableAcceptedTerms struct {
	value *AcceptedTerms
	isSet bool
}

func (v NullableAcceptedTerms) Get() *AcceptedTerms {
	return v.value
}

func (v *NullableAcceptedTerms) Set(val *AcceptedTerms) {
	v.value = val
	v.isSet = true
}

func (v NullableAcceptedTerms) IsSet() bool {
	return v.isSet
}

func (v *NullableAcceptedTerms) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcceptedTerms(val *AcceptedTerms) *NullableAcceptedTerms {
	return &NullableAcceptedTerms{value: val, isSet: true}
}

func (v NullableAcceptedTerms) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcceptedTerms) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
