/*
 * Relay API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v20200615
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserTokenWithSecretAllOf A user token with the secret
type UserTokenWithSecretAllOf struct {
	// The user token secret
	Secret *string `json:"secret,omitempty"`
	// Type of token
	Type string `json:"type"`
}

// NewUserTokenWithSecretAllOf instantiates a new UserTokenWithSecretAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserTokenWithSecretAllOf(type_ string) *UserTokenWithSecretAllOf {
	this := UserTokenWithSecretAllOf{}
	this.Type = type_
	return &this
}

// NewUserTokenWithSecretAllOfWithDefaults instantiates a new UserTokenWithSecretAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserTokenWithSecretAllOfWithDefaults() *UserTokenWithSecretAllOf {
	this := UserTokenWithSecretAllOf{}
	return &this
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *UserTokenWithSecretAllOf) GetSecret() string {
	if o == nil || o.Secret == nil {
		var ret string
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTokenWithSecretAllOf) GetSecretOk() (*string, bool) {
	if o == nil || o.Secret == nil {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *UserTokenWithSecretAllOf) HasSecret() bool {
	if o != nil && o.Secret != nil {
		return true
	}

	return false
}

// SetSecret gets a reference to the given string and assigns it to the Secret field.
func (o *UserTokenWithSecretAllOf) SetSecret(v string) {
	o.Secret = &v
}

// GetType returns the Type field value
func (o *UserTokenWithSecretAllOf) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UserTokenWithSecretAllOf) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UserTokenWithSecretAllOf) SetType(v string) {
	o.Type = v
}

func (o UserTokenWithSecretAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Secret != nil {
		toSerialize["secret"] = o.Secret
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableUserTokenWithSecretAllOf struct {
	value *UserTokenWithSecretAllOf
	isSet bool
}

func (v NullableUserTokenWithSecretAllOf) Get() *UserTokenWithSecretAllOf {
	return v.value
}

func (v *NullableUserTokenWithSecretAllOf) Set(val *UserTokenWithSecretAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableUserTokenWithSecretAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableUserTokenWithSecretAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserTokenWithSecretAllOf(val *UserTokenWithSecretAllOf) *NullableUserTokenWithSecretAllOf {
	return &NullableUserTokenWithSecretAllOf{value: val, isSet: true}
}

func (v NullableUserTokenWithSecretAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserTokenWithSecretAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


