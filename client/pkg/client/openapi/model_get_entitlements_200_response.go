/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GetEntitlements200Response The response type for the product entitlements list
type GetEntitlements200Response struct {
	// A list of product entitlements
	Entitlements []Entitlement `json:"entitlements,omitempty"`
}

// NewGetEntitlements200Response instantiates a new GetEntitlements200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEntitlements200Response() *GetEntitlements200Response {
	this := GetEntitlements200Response{}
	return &this
}

// NewGetEntitlements200ResponseWithDefaults instantiates a new GetEntitlements200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEntitlements200ResponseWithDefaults() *GetEntitlements200Response {
	this := GetEntitlements200Response{}
	return &this
}

// GetEntitlements returns the Entitlements field value if set, zero value otherwise.
func (o *GetEntitlements200Response) GetEntitlements() []Entitlement {
	if o == nil || o.Entitlements == nil {
		var ret []Entitlement
		return ret
	}
	return o.Entitlements
}

// GetEntitlementsOk returns a tuple with the Entitlements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEntitlements200Response) GetEntitlementsOk() ([]Entitlement, bool) {
	if o == nil || o.Entitlements == nil {
		return nil, false
	}
	return o.Entitlements, true
}

// HasEntitlements returns a boolean if a field has been set.
func (o *GetEntitlements200Response) HasEntitlements() bool {
	if o != nil && o.Entitlements != nil {
		return true
	}

	return false
}

// SetEntitlements gets a reference to the given []Entitlement and assigns it to the Entitlements field.
func (o *GetEntitlements200Response) SetEntitlements(v []Entitlement) {
	o.Entitlements = v
}

func (o GetEntitlements200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Entitlements != nil {
		toSerialize["entitlements"] = o.Entitlements
	}
	return json.Marshal(toSerialize)
}

type NullableGetEntitlements200Response struct {
	value *GetEntitlements200Response
	isSet bool
}

func (v NullableGetEntitlements200Response) Get() *GetEntitlements200Response {
	return v.value
}

func (v *NullableGetEntitlements200Response) Set(val *GetEntitlements200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEntitlements200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEntitlements200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEntitlements200Response(val *GetEntitlements200Response) *NullableGetEntitlements200Response {
	return &NullableGetEntitlements200Response{value: val, isSet: true}
}

func (v NullableGetEntitlements200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEntitlements200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
