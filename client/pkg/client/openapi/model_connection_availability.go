/*
 * Relay API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v20200615
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// ConnectionAvailability Information about this connection's usability
type ConnectionAvailability struct {
	Error *Error `json:"error,omitempty"`
	// The current test result
	Status string `json:"status"`
	// The most recent time this connection was tested
	TestedAt *time.Time `json:"tested_at,omitempty"`
}

// NewConnectionAvailability instantiates a new ConnectionAvailability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionAvailability(status string) *ConnectionAvailability {
	this := ConnectionAvailability{}
	this.Status = status
	return &this
}

// NewConnectionAvailabilityWithDefaults instantiates a new ConnectionAvailability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionAvailabilityWithDefaults() *ConnectionAvailability {
	this := ConnectionAvailability{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ConnectionAvailability) GetError() Error {
	if o == nil || o.Error == nil {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionAvailability) GetErrorOk() (*Error, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ConnectionAvailability) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *ConnectionAvailability) SetError(v Error) {
	o.Error = &v
}

// GetStatus returns the Status field value
func (o *ConnectionAvailability) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ConnectionAvailability) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ConnectionAvailability) SetStatus(v string) {
	o.Status = v
}

// GetTestedAt returns the TestedAt field value if set, zero value otherwise.
func (o *ConnectionAvailability) GetTestedAt() time.Time {
	if o == nil || o.TestedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.TestedAt
}

// GetTestedAtOk returns a tuple with the TestedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionAvailability) GetTestedAtOk() (*time.Time, bool) {
	if o == nil || o.TestedAt == nil {
		return nil, false
	}
	return o.TestedAt, true
}

// HasTestedAt returns a boolean if a field has been set.
func (o *ConnectionAvailability) HasTestedAt() bool {
	if o != nil && o.TestedAt != nil {
		return true
	}

	return false
}

// SetTestedAt gets a reference to the given time.Time and assigns it to the TestedAt field.
func (o *ConnectionAvailability) SetTestedAt(v time.Time) {
	o.TestedAt = &v
}

func (o ConnectionAvailability) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.TestedAt != nil {
		toSerialize["tested_at"] = o.TestedAt
	}
	return json.Marshal(toSerialize)
}

type NullableConnectionAvailability struct {
	value *ConnectionAvailability
	isSet bool
}

func (v NullableConnectionAvailability) Get() *ConnectionAvailability {
	return v.value
}

func (v *NullableConnectionAvailability) Set(val *ConnectionAvailability) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionAvailability) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionAvailability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionAvailability(val *ConnectionAvailability) *NullableConnectionAvailability {
	return &NullableConnectionAvailability{value: val, isSet: true}
}

func (v NullableConnectionAvailability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionAvailability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


