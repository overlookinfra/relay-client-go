/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// WorkflowTriggerAllOf An asynchronous trigger for a workflow
type WorkflowTriggerAllOf struct {
	Binding *WorkflowTriggerBinding `json:"binding,omitempty"`
	// The name of this workflow trigger
	Name       string                  `json:"name"`
	References *WorkflowDataReferences `json:"references,omitempty"`
	Source     WorkflowTriggerSource   `json:"source"`
	// An expression evaluated by the backend
	When interface{} `json:"when,omitempty"`
}

// NewWorkflowTriggerAllOf instantiates a new WorkflowTriggerAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowTriggerAllOf(name string, source WorkflowTriggerSource) *WorkflowTriggerAllOf {
	this := WorkflowTriggerAllOf{}
	this.Name = name
	this.Source = source
	return &this
}

// NewWorkflowTriggerAllOfWithDefaults instantiates a new WorkflowTriggerAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowTriggerAllOfWithDefaults() *WorkflowTriggerAllOf {
	this := WorkflowTriggerAllOf{}
	return &this
}

// GetBinding returns the Binding field value if set, zero value otherwise.
func (o *WorkflowTriggerAllOf) GetBinding() WorkflowTriggerBinding {
	if o == nil || o.Binding == nil {
		var ret WorkflowTriggerBinding
		return ret
	}
	return *o.Binding
}

// GetBindingOk returns a tuple with the Binding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTriggerAllOf) GetBindingOk() (*WorkflowTriggerBinding, bool) {
	if o == nil || o.Binding == nil {
		return nil, false
	}
	return o.Binding, true
}

// HasBinding returns a boolean if a field has been set.
func (o *WorkflowTriggerAllOf) HasBinding() bool {
	if o != nil && o.Binding != nil {
		return true
	}

	return false
}

// SetBinding gets a reference to the given WorkflowTriggerBinding and assigns it to the Binding field.
func (o *WorkflowTriggerAllOf) SetBinding(v WorkflowTriggerBinding) {
	o.Binding = &v
}

// GetName returns the Name field value
func (o *WorkflowTriggerAllOf) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WorkflowTriggerAllOf) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *WorkflowTriggerAllOf) SetName(v string) {
	o.Name = v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *WorkflowTriggerAllOf) GetReferences() WorkflowDataReferences {
	if o == nil || o.References == nil {
		var ret WorkflowDataReferences
		return ret
	}
	return *o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowTriggerAllOf) GetReferencesOk() (*WorkflowDataReferences, bool) {
	if o == nil || o.References == nil {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *WorkflowTriggerAllOf) HasReferences() bool {
	if o != nil && o.References != nil {
		return true
	}

	return false
}

// SetReferences gets a reference to the given WorkflowDataReferences and assigns it to the References field.
func (o *WorkflowTriggerAllOf) SetReferences(v WorkflowDataReferences) {
	o.References = &v
}

// GetSource returns the Source field value
func (o *WorkflowTriggerAllOf) GetSource() WorkflowTriggerSource {
	if o == nil {
		var ret WorkflowTriggerSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *WorkflowTriggerAllOf) GetSourceOk() (*WorkflowTriggerSource, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *WorkflowTriggerAllOf) SetSource(v WorkflowTriggerSource) {
	o.Source = v
}

// GetWhen returns the When field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkflowTriggerAllOf) GetWhen() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.When
}

// GetWhenOk returns a tuple with the When field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkflowTriggerAllOf) GetWhenOk() (*interface{}, bool) {
	if o == nil || o.When == nil {
		return nil, false
	}
	return &o.When, true
}

// HasWhen returns a boolean if a field has been set.
func (o *WorkflowTriggerAllOf) HasWhen() bool {
	if o != nil && o.When != nil {
		return true
	}

	return false
}

// SetWhen gets a reference to the given interface{} and assigns it to the When field.
func (o *WorkflowTriggerAllOf) SetWhen(v interface{}) {
	o.When = v
}

func (o WorkflowTriggerAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Binding != nil {
		toSerialize["binding"] = o.Binding
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.References != nil {
		toSerialize["references"] = o.References
	}
	if true {
		toSerialize["source"] = o.Source
	}
	if o.When != nil {
		toSerialize["when"] = o.When
	}
	return json.Marshal(toSerialize)
}

type NullableWorkflowTriggerAllOf struct {
	value *WorkflowTriggerAllOf
	isSet bool
}

func (v NullableWorkflowTriggerAllOf) Get() *WorkflowTriggerAllOf {
	return v.value
}

func (v *NullableWorkflowTriggerAllOf) Set(val *WorkflowTriggerAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowTriggerAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowTriggerAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowTriggerAllOf(val *WorkflowTriggerAllOf) *NullableWorkflowTriggerAllOf {
	return &NullableWorkflowTriggerAllOf{value: val, isSet: true}
}

func (v NullableWorkflowTriggerAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowTriggerAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
