/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ConnectionAuthInput - Connection authentication values
type ConnectionAuthInput struct {
	SecretConnectionAuthInput *SecretConnectionAuthInput
}

// SecretConnectionAuthInputAsConnectionAuthInput is a convenience function that returns SecretConnectionAuthInput wrapped in ConnectionAuthInput
func SecretConnectionAuthInputAsConnectionAuthInput(v *SecretConnectionAuthInput) ConnectionAuthInput {
	return ConnectionAuthInput{
		SecretConnectionAuthInput: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ConnectionAuthInput) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'SecretConnectionAuthInput'
	if jsonDict["type"] == "SecretConnectionAuthInput" {
		// try to unmarshal JSON data into SecretConnectionAuthInput
		err = json.Unmarshal(data, &dst.SecretConnectionAuthInput)
		if err == nil {
			return nil // data stored in dst.SecretConnectionAuthInput, return on the first match
		} else {
			dst.SecretConnectionAuthInput = nil
			return fmt.Errorf("Failed to unmarshal ConnectionAuthInput as SecretConnectionAuthInput: %s", err.Error())
		}
	}

	// check if the discriminator value is 'secret'
	if jsonDict["type"] == "secret" {
		// try to unmarshal JSON data into SecretConnectionAuthInput
		err = json.Unmarshal(data, &dst.SecretConnectionAuthInput)
		if err == nil {
			return nil // data stored in dst.SecretConnectionAuthInput, return on the first match
		} else {
			dst.SecretConnectionAuthInput = nil
			return fmt.Errorf("Failed to unmarshal ConnectionAuthInput as SecretConnectionAuthInput: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ConnectionAuthInput) MarshalJSON() ([]byte, error) {
	if src.SecretConnectionAuthInput != nil {
		return json.Marshal(&src.SecretConnectionAuthInput)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ConnectionAuthInput) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.SecretConnectionAuthInput != nil {
		return obj.SecretConnectionAuthInput
	}

	// all schemas are nil
	return nil
}

type NullableConnectionAuthInput struct {
	value *ConnectionAuthInput
	isSet bool
}

func (v NullableConnectionAuthInput) Get() *ConnectionAuthInput {
	return v.value
}

func (v *NullableConnectionAuthInput) Set(val *ConnectionAuthInput) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionAuthInput) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionAuthInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionAuthInput(val *ConnectionAuthInput) *NullableConnectionAuthInput {
	return &NullableConnectionAuthInput{value: val, isSet: true}
}

func (v NullableConnectionAuthInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionAuthInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
