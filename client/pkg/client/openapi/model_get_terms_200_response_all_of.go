/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GetTerms200ResponseAllOf The response type for the current terms and conditions
type GetTerms200ResponseAllOf struct {
	Terms *Terms `json:"terms,omitempty"`
}

// NewGetTerms200ResponseAllOf instantiates a new GetTerms200ResponseAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetTerms200ResponseAllOf() *GetTerms200ResponseAllOf {
	this := GetTerms200ResponseAllOf{}
	return &this
}

// NewGetTerms200ResponseAllOfWithDefaults instantiates a new GetTerms200ResponseAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetTerms200ResponseAllOfWithDefaults() *GetTerms200ResponseAllOf {
	this := GetTerms200ResponseAllOf{}
	return &this
}

// GetTerms returns the Terms field value if set, zero value otherwise.
func (o *GetTerms200ResponseAllOf) GetTerms() Terms {
	if o == nil || o.Terms == nil {
		var ret Terms
		return ret
	}
	return *o.Terms
}

// GetTermsOk returns a tuple with the Terms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetTerms200ResponseAllOf) GetTermsOk() (*Terms, bool) {
	if o == nil || o.Terms == nil {
		return nil, false
	}
	return o.Terms, true
}

// HasTerms returns a boolean if a field has been set.
func (o *GetTerms200ResponseAllOf) HasTerms() bool {
	if o != nil && o.Terms != nil {
		return true
	}

	return false
}

// SetTerms gets a reference to the given Terms and assigns it to the Terms field.
func (o *GetTerms200ResponseAllOf) SetTerms(v Terms) {
	o.Terms = &v
}

func (o GetTerms200ResponseAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Terms != nil {
		toSerialize["terms"] = o.Terms
	}
	return json.Marshal(toSerialize)
}

type NullableGetTerms200ResponseAllOf struct {
	value *GetTerms200ResponseAllOf
	isSet bool
}

func (v NullableGetTerms200ResponseAllOf) Get() *GetTerms200ResponseAllOf {
	return v.value
}

func (v *NullableGetTerms200ResponseAllOf) Set(val *GetTerms200ResponseAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableGetTerms200ResponseAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableGetTerms200ResponseAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetTerms200ResponseAllOf(val *GetTerms200ResponseAllOf) *NullableGetTerms200ResponseAllOf {
	return &NullableGetTerms200ResponseAllOf{value: val, isSet: true}
}

func (v NullableGetTerms200ResponseAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetTerms200ResponseAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
