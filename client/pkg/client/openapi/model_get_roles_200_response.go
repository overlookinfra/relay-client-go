/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GetRoles200Response The response type for listing the roles in an account
type GetRoles200Response struct {
	// The roles in this account
	Roles []Role `json:"roles,omitempty"`
}

// NewGetRoles200Response instantiates a new GetRoles200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetRoles200Response() *GetRoles200Response {
	this := GetRoles200Response{}
	return &this
}

// NewGetRoles200ResponseWithDefaults instantiates a new GetRoles200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetRoles200ResponseWithDefaults() *GetRoles200Response {
	this := GetRoles200Response{}
	return &this
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *GetRoles200Response) GetRoles() []Role {
	if o == nil || o.Roles == nil {
		var ret []Role
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetRoles200Response) GetRolesOk() ([]Role, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *GetRoles200Response) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []Role and assigns it to the Roles field.
func (o *GetRoles200Response) SetRoles(v []Role) {
	o.Roles = v
}

func (o GetRoles200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	return json.Marshal(toSerialize)
}

type NullableGetRoles200Response struct {
	value *GetRoles200Response
	isSet bool
}

func (v NullableGetRoles200Response) Get() *GetRoles200Response {
	return v.value
}

func (v *NullableGetRoles200Response) Set(val *GetRoles200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRoles200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRoles200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRoles200Response(val *GetRoles200Response) *NullableGetRoles200Response {
	return &NullableGetRoles200Response{value: val, isSet: true}
}

func (v NullableGetRoles200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRoles200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
