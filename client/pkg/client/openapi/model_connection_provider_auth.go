/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ConnectionProviderAuth - Connection authentication information
type ConnectionProviderAuth struct {
	OAuth2ConnectionProviderAuth *OAuth2ConnectionProviderAuth
	SecretConnectionProviderAuth *SecretConnectionProviderAuth
}

// OAuth2ConnectionProviderAuthAsConnectionProviderAuth is a convenience function that returns OAuth2ConnectionProviderAuth wrapped in ConnectionProviderAuth
func OAuth2ConnectionProviderAuthAsConnectionProviderAuth(v *OAuth2ConnectionProviderAuth) ConnectionProviderAuth {
	return ConnectionProviderAuth{ OAuth2ConnectionProviderAuth: v}
}

// SecretConnectionProviderAuthAsConnectionProviderAuth is a convenience function that returns SecretConnectionProviderAuth wrapped in ConnectionProviderAuth
func SecretConnectionProviderAuthAsConnectionProviderAuth(v *SecretConnectionProviderAuth) ConnectionProviderAuth {
	return ConnectionProviderAuth{ SecretConnectionProviderAuth: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ConnectionProviderAuth) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into OAuth2ConnectionProviderAuth
	err = json.Unmarshal(data, &dst.OAuth2ConnectionProviderAuth)
	if err == nil {
		jsonOAuth2ConnectionProviderAuth, _ := json.Marshal(dst.OAuth2ConnectionProviderAuth)
		if string(jsonOAuth2ConnectionProviderAuth) == "{}" { // empty struct
			dst.OAuth2ConnectionProviderAuth = nil
		} else {
			match++
		}
	} else {
		dst.OAuth2ConnectionProviderAuth = nil
	}

	// try to unmarshal data into SecretConnectionProviderAuth
	err = json.Unmarshal(data, &dst.SecretConnectionProviderAuth)
	if err == nil {
		jsonSecretConnectionProviderAuth, _ := json.Marshal(dst.SecretConnectionProviderAuth)
		if string(jsonSecretConnectionProviderAuth) == "{}" { // empty struct
			dst.SecretConnectionProviderAuth = nil
		} else {
			match++
		}
	} else {
		dst.SecretConnectionProviderAuth = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.OAuth2ConnectionProviderAuth = nil
		dst.SecretConnectionProviderAuth = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(ConnectionProviderAuth)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(ConnectionProviderAuth)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ConnectionProviderAuth) MarshalJSON() ([]byte, error) {
	if src.OAuth2ConnectionProviderAuth != nil {
		return json.Marshal(&src.OAuth2ConnectionProviderAuth)
	}

	if src.SecretConnectionProviderAuth != nil {
		return json.Marshal(&src.SecretConnectionProviderAuth)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ConnectionProviderAuth) GetActualInstance() (interface{}) {
	if obj.OAuth2ConnectionProviderAuth != nil {
		return obj.OAuth2ConnectionProviderAuth
	}

	if obj.SecretConnectionProviderAuth != nil {
		return obj.SecretConnectionProviderAuth
	}

	// all schemas are nil
	return nil
}

type NullableConnectionProviderAuth struct {
	value *ConnectionProviderAuth
	isSet bool
}

func (v NullableConnectionProviderAuth) Get() *ConnectionProviderAuth {
	return v.value
}

func (v *NullableConnectionProviderAuth) Set(val *ConnectionProviderAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionProviderAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionProviderAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionProviderAuth(val *ConnectionProviderAuth) *NullableConnectionProviderAuth {
	return &NullableConnectionProviderAuth{value: val, isSet: true}
}

func (v NullableConnectionProviderAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionProviderAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


