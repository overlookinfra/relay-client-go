/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// WorkflowTriggerSource - A source for trigger events
type WorkflowTriggerSource struct {
	PushWorkflowTriggerSource     *PushWorkflowTriggerSource
	ScheduleWorkflowTriggerSource *ScheduleWorkflowTriggerSource
	WebhookWorkflowTriggerSource  *WebhookWorkflowTriggerSource
}

// PushWorkflowTriggerSourceAsWorkflowTriggerSource is a convenience function that returns PushWorkflowTriggerSource wrapped in WorkflowTriggerSource
func PushWorkflowTriggerSourceAsWorkflowTriggerSource(v *PushWorkflowTriggerSource) WorkflowTriggerSource {
	return WorkflowTriggerSource{PushWorkflowTriggerSource: v}
}

// ScheduleWorkflowTriggerSourceAsWorkflowTriggerSource is a convenience function that returns ScheduleWorkflowTriggerSource wrapped in WorkflowTriggerSource
func ScheduleWorkflowTriggerSourceAsWorkflowTriggerSource(v *ScheduleWorkflowTriggerSource) WorkflowTriggerSource {
	return WorkflowTriggerSource{ScheduleWorkflowTriggerSource: v}
}

// WebhookWorkflowTriggerSourceAsWorkflowTriggerSource is a convenience function that returns WebhookWorkflowTriggerSource wrapped in WorkflowTriggerSource
func WebhookWorkflowTriggerSourceAsWorkflowTriggerSource(v *WebhookWorkflowTriggerSource) WorkflowTriggerSource {
	return WorkflowTriggerSource{WebhookWorkflowTriggerSource: v}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *WorkflowTriggerSource) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'PushWorkflowTriggerSource'
	if jsonDict["type"] == "PushWorkflowTriggerSource" {
		// try to unmarshal JSON data into PushWorkflowTriggerSource
		err = json.Unmarshal(data, &dst.PushWorkflowTriggerSource)
		if err == nil {
			return nil // data stored in dst.PushWorkflowTriggerSource, return on the first match
		} else {
			dst.PushWorkflowTriggerSource = nil
			return fmt.Errorf("Failed to unmarshal WorkflowTriggerSource as PushWorkflowTriggerSource: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ScheduleWorkflowTriggerSource'
	if jsonDict["type"] == "ScheduleWorkflowTriggerSource" {
		// try to unmarshal JSON data into ScheduleWorkflowTriggerSource
		err = json.Unmarshal(data, &dst.ScheduleWorkflowTriggerSource)
		if err == nil {
			return nil // data stored in dst.ScheduleWorkflowTriggerSource, return on the first match
		} else {
			dst.ScheduleWorkflowTriggerSource = nil
			return fmt.Errorf("Failed to unmarshal WorkflowTriggerSource as ScheduleWorkflowTriggerSource: %s", err.Error())
		}
	}

	// check if the discriminator value is 'WebhookWorkflowTriggerSource'
	if jsonDict["type"] == "WebhookWorkflowTriggerSource" {
		// try to unmarshal JSON data into WebhookWorkflowTriggerSource
		err = json.Unmarshal(data, &dst.WebhookWorkflowTriggerSource)
		if err == nil {
			return nil // data stored in dst.WebhookWorkflowTriggerSource, return on the first match
		} else {
			dst.WebhookWorkflowTriggerSource = nil
			return fmt.Errorf("Failed to unmarshal WorkflowTriggerSource as WebhookWorkflowTriggerSource: %s", err.Error())
		}
	}

	// check if the discriminator value is 'push'
	if jsonDict["type"] == "push" {
		// try to unmarshal JSON data into PushWorkflowTriggerSource
		err = json.Unmarshal(data, &dst.PushWorkflowTriggerSource)
		if err == nil {
			return nil // data stored in dst.PushWorkflowTriggerSource, return on the first match
		} else {
			dst.PushWorkflowTriggerSource = nil
			return fmt.Errorf("Failed to unmarshal WorkflowTriggerSource as PushWorkflowTriggerSource: %s", err.Error())
		}
	}

	// check if the discriminator value is 'schedule'
	if jsonDict["type"] == "schedule" {
		// try to unmarshal JSON data into ScheduleWorkflowTriggerSource
		err = json.Unmarshal(data, &dst.ScheduleWorkflowTriggerSource)
		if err == nil {
			return nil // data stored in dst.ScheduleWorkflowTriggerSource, return on the first match
		} else {
			dst.ScheduleWorkflowTriggerSource = nil
			return fmt.Errorf("Failed to unmarshal WorkflowTriggerSource as ScheduleWorkflowTriggerSource: %s", err.Error())
		}
	}

	// check if the discriminator value is 'webhook'
	if jsonDict["type"] == "webhook" {
		// try to unmarshal JSON data into WebhookWorkflowTriggerSource
		err = json.Unmarshal(data, &dst.WebhookWorkflowTriggerSource)
		if err == nil {
			return nil // data stored in dst.WebhookWorkflowTriggerSource, return on the first match
		} else {
			dst.WebhookWorkflowTriggerSource = nil
			return fmt.Errorf("Failed to unmarshal WorkflowTriggerSource as WebhookWorkflowTriggerSource: %s", err.Error())
		}
	}

	match := 0
	// try to unmarshal data into PushWorkflowTriggerSource
	err = json.Unmarshal(data, &dst.PushWorkflowTriggerSource)
	if err == nil {
		jsonPushWorkflowTriggerSource, err := json.Marshal(dst.PushWorkflowTriggerSource)
		if err == nil {
			if string(jsonPushWorkflowTriggerSource) == "" || string(jsonPushWorkflowTriggerSource) == "{}" { // empty struct
				dst.PushWorkflowTriggerSource = nil
			} else {
				match++
			}
		} else {
			dst.PushWorkflowTriggerSource = nil
		}
	} else {
		dst.PushWorkflowTriggerSource = nil
	}

	// try to unmarshal data into ScheduleWorkflowTriggerSource
	err = json.Unmarshal(data, &dst.ScheduleWorkflowTriggerSource)
	if err == nil {
		jsonScheduleWorkflowTriggerSource, err := json.Marshal(dst.ScheduleWorkflowTriggerSource)
		if err == nil {
			if string(jsonScheduleWorkflowTriggerSource) == "" || string(jsonScheduleWorkflowTriggerSource) == "{}" { // empty struct
				dst.ScheduleWorkflowTriggerSource = nil
			} else {
				match++
			}
		} else {
			dst.ScheduleWorkflowTriggerSource = nil
		}
	} else {
		dst.ScheduleWorkflowTriggerSource = nil
	}

	// try to unmarshal data into WebhookWorkflowTriggerSource
	err = json.Unmarshal(data, &dst.WebhookWorkflowTriggerSource)
	if err == nil {
		jsonWebhookWorkflowTriggerSource, err := json.Marshal(dst.WebhookWorkflowTriggerSource)
		if err == nil {
			if string(jsonWebhookWorkflowTriggerSource) == "" || string(jsonWebhookWorkflowTriggerSource) == "{}" { // empty struct
				dst.WebhookWorkflowTriggerSource = nil
			} else {
				match++
			}
		} else {
			dst.WebhookWorkflowTriggerSource = nil
		}
	} else {
		dst.WebhookWorkflowTriggerSource = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.PushWorkflowTriggerSource = nil
		dst.ScheduleWorkflowTriggerSource = nil
		dst.WebhookWorkflowTriggerSource = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(WorkflowTriggerSource)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(WorkflowTriggerSource)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src WorkflowTriggerSource) MarshalJSON() ([]byte, error) {
	if src.PushWorkflowTriggerSource != nil {
		return json.Marshal(&src.PushWorkflowTriggerSource)
	}

	if src.ScheduleWorkflowTriggerSource != nil {
		return json.Marshal(&src.ScheduleWorkflowTriggerSource)
	}

	if src.WebhookWorkflowTriggerSource != nil {
		return json.Marshal(&src.WebhookWorkflowTriggerSource)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *WorkflowTriggerSource) GetActualInstance() interface{} {
	if obj.PushWorkflowTriggerSource != nil {
		return obj.PushWorkflowTriggerSource
	}

	if obj.ScheduleWorkflowTriggerSource != nil {
		return obj.ScheduleWorkflowTriggerSource
	}

	if obj.WebhookWorkflowTriggerSource != nil {
		return obj.WebhookWorkflowTriggerSource
	}

	// all schemas are nil
	return nil
}

type NullableWorkflowTriggerSource struct {
	value *WorkflowTriggerSource
	isSet bool
}

func (v NullableWorkflowTriggerSource) Get() *WorkflowTriggerSource {
	return v.value
}

func (v *NullableWorkflowTriggerSource) Set(val *WorkflowTriggerSource) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowTriggerSource) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowTriggerSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowTriggerSource(val *WorkflowTriggerSource) *NullableWorkflowTriggerSource {
	return &NullableWorkflowTriggerSource{value: val, isSet: true}
}

func (v NullableWorkflowTriggerSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowTriggerSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
