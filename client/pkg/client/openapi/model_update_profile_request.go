/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UpdateProfileRequest The editable fields of a Relay user's profile
type UpdateProfileRequest struct {
	// Updated user name
	Name string `json:"name"`
	// User preferences
	Preferences map[string]interface{} `json:"preferences,omitempty"`
}

// NewUpdateProfileRequest instantiates a new UpdateProfileRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateProfileRequest(name string) *UpdateProfileRequest {
	this := UpdateProfileRequest{}
	this.Name = name
	return &this
}

// NewUpdateProfileRequestWithDefaults instantiates a new UpdateProfileRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateProfileRequestWithDefaults() *UpdateProfileRequest {
	this := UpdateProfileRequest{}
	return &this
}

// GetName returns the Name field value
func (o *UpdateProfileRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateProfileRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateProfileRequest) SetName(v string) {
	o.Name = v
}

// GetPreferences returns the Preferences field value if set, zero value otherwise.
func (o *UpdateProfileRequest) GetPreferences() map[string]interface{} {
	if o == nil || o.Preferences == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Preferences
}

// GetPreferencesOk returns a tuple with the Preferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProfileRequest) GetPreferencesOk() (map[string]interface{}, bool) {
	if o == nil || o.Preferences == nil {
		return nil, false
	}
	return o.Preferences, true
}

// HasPreferences returns a boolean if a field has been set.
func (o *UpdateProfileRequest) HasPreferences() bool {
	if o != nil && o.Preferences != nil {
		return true
	}

	return false
}

// SetPreferences gets a reference to the given map[string]interface{} and assigns it to the Preferences field.
func (o *UpdateProfileRequest) SetPreferences(v map[string]interface{}) {
	o.Preferences = v
}

func (o UpdateProfileRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Preferences != nil {
		toSerialize["preferences"] = o.Preferences
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateProfileRequest struct {
	value *UpdateProfileRequest
	isSet bool
}

func (v NullableUpdateProfileRequest) Get() *UpdateProfileRequest {
	return v.value
}

func (v *NullableUpdateProfileRequest) Set(val *UpdateProfileRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateProfileRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateProfileRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateProfileRequest(val *UpdateProfileRequest) *NullableUpdateProfileRequest {
	return &NullableUpdateProfileRequest{value: val, isSet: true}
}

func (v NullableUpdateProfileRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateProfileRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
