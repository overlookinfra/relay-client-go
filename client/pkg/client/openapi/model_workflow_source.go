/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// WorkflowSource - The source of a workflow
type WorkflowSource struct {
	WorkflowRelaySource      *WorkflowRelaySource
	WorkflowRepositorySource *WorkflowRepositorySource
}

// WorkflowRelaySourceAsWorkflowSource is a convenience function that returns WorkflowRelaySource wrapped in WorkflowSource
func WorkflowRelaySourceAsWorkflowSource(v *WorkflowRelaySource) WorkflowSource {
	return WorkflowSource{
		WorkflowRelaySource: v,
	}
}

// WorkflowRepositorySourceAsWorkflowSource is a convenience function that returns WorkflowRepositorySource wrapped in WorkflowSource
func WorkflowRepositorySourceAsWorkflowSource(v *WorkflowRepositorySource) WorkflowSource {
	return WorkflowSource{
		WorkflowRepositorySource: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *WorkflowSource) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'WorkflowRelaySource'
	if jsonDict["type"] == "WorkflowRelaySource" {
		// try to unmarshal JSON data into WorkflowRelaySource
		err = json.Unmarshal(data, &dst.WorkflowRelaySource)
		if err == nil {
			return nil // data stored in dst.WorkflowRelaySource, return on the first match
		} else {
			dst.WorkflowRelaySource = nil
			return fmt.Errorf("Failed to unmarshal WorkflowSource as WorkflowRelaySource: %s", err.Error())
		}
	}

	// check if the discriminator value is 'WorkflowRepositorySource'
	if jsonDict["type"] == "WorkflowRepositorySource" {
		// try to unmarshal JSON data into WorkflowRepositorySource
		err = json.Unmarshal(data, &dst.WorkflowRepositorySource)
		if err == nil {
			return nil // data stored in dst.WorkflowRepositorySource, return on the first match
		} else {
			dst.WorkflowRepositorySource = nil
			return fmt.Errorf("Failed to unmarshal WorkflowSource as WorkflowRepositorySource: %s", err.Error())
		}
	}

	// check if the discriminator value is 'relay'
	if jsonDict["type"] == "relay" {
		// try to unmarshal JSON data into WorkflowRelaySource
		err = json.Unmarshal(data, &dst.WorkflowRelaySource)
		if err == nil {
			return nil // data stored in dst.WorkflowRelaySource, return on the first match
		} else {
			dst.WorkflowRelaySource = nil
			return fmt.Errorf("Failed to unmarshal WorkflowSource as WorkflowRelaySource: %s", err.Error())
		}
	}

	// check if the discriminator value is 'repository'
	if jsonDict["type"] == "repository" {
		// try to unmarshal JSON data into WorkflowRepositorySource
		err = json.Unmarshal(data, &dst.WorkflowRepositorySource)
		if err == nil {
			return nil // data stored in dst.WorkflowRepositorySource, return on the first match
		} else {
			dst.WorkflowRepositorySource = nil
			return fmt.Errorf("Failed to unmarshal WorkflowSource as WorkflowRepositorySource: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src WorkflowSource) MarshalJSON() ([]byte, error) {
	if src.WorkflowRelaySource != nil {
		return json.Marshal(&src.WorkflowRelaySource)
	}

	if src.WorkflowRepositorySource != nil {
		return json.Marshal(&src.WorkflowRepositorySource)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *WorkflowSource) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.WorkflowRelaySource != nil {
		return obj.WorkflowRelaySource
	}

	if obj.WorkflowRepositorySource != nil {
		return obj.WorkflowRepositorySource
	}

	// all schemas are nil
	return nil
}

type NullableWorkflowSource struct {
	value *WorkflowSource
	isSet bool
}

func (v NullableWorkflowSource) Get() *WorkflowSource {
	return v.value
}

func (v *NullableWorkflowSource) Set(val *WorkflowSource) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowSource) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowSource(val *WorkflowSource) *NullableWorkflowSource {
	return &NullableWorkflowSource{value: val, isSet: true}
}

func (v NullableWorkflowSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
