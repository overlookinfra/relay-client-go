/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// WorkflowRunStepDecorator struct for WorkflowRunStepDecorator
type WorkflowRunStepDecorator struct {
	// Name of the decorator
	Name string `json:"name"`
	Link WorkflowRunStepDecoratorLinkLink `json:"link"`
	Type string `json:"type"`
}

// NewWorkflowRunStepDecorator instantiates a new WorkflowRunStepDecorator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowRunStepDecorator(name string, link WorkflowRunStepDecoratorLinkLink, type_ string) *WorkflowRunStepDecorator {
	this := WorkflowRunStepDecorator{}
	this.Name = name
	this.Link = link
	this.Type = type_
	return &this
}

// NewWorkflowRunStepDecoratorWithDefaults instantiates a new WorkflowRunStepDecorator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowRunStepDecoratorWithDefaults() *WorkflowRunStepDecorator {
	this := WorkflowRunStepDecorator{}
	return &this
}

// GetName returns the Name field value
func (o *WorkflowRunStepDecorator) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *WorkflowRunStepDecorator) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *WorkflowRunStepDecorator) SetName(v string) {
	o.Name = v
}

// GetLink returns the Link field value
func (o *WorkflowRunStepDecorator) GetLink() WorkflowRunStepDecoratorLinkLink {
	if o == nil {
		var ret WorkflowRunStepDecoratorLinkLink
		return ret
	}

	return o.Link
}

// GetLinkOk returns a tuple with the Link field value
// and a boolean to check if the value has been set.
func (o *WorkflowRunStepDecorator) GetLinkOk() (*WorkflowRunStepDecoratorLinkLink, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Link, true
}

// SetLink sets field value
func (o *WorkflowRunStepDecorator) SetLink(v WorkflowRunStepDecoratorLinkLink) {
	o.Link = v
}

// GetType returns the Type field value
func (o *WorkflowRunStepDecorator) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *WorkflowRunStepDecorator) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *WorkflowRunStepDecorator) SetType(v string) {
	o.Type = v
}

func (o WorkflowRunStepDecorator) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["link"] = o.Link
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableWorkflowRunStepDecorator struct {
	value *WorkflowRunStepDecorator
	isSet bool
}

func (v NullableWorkflowRunStepDecorator) Get() *WorkflowRunStepDecorator {
	return v.value
}

func (v *NullableWorkflowRunStepDecorator) Set(val *WorkflowRunStepDecorator) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowRunStepDecorator) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowRunStepDecorator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowRunStepDecorator(val *WorkflowRunStepDecorator) *NullableWorkflowRunStepDecorator {
	return &NullableWorkflowRunStepDecorator{value: val, isSet: true}
}

func (v NullableWorkflowRunStepDecorator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowRunStepDecorator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


