/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// WorkflowError The latest error for the workflow and when it occurred
type WorkflowError struct {
	Error *Error `json:"error,omitempty"`
	// The time this workflow error occurred
	ErroredAt *time.Time `json:"errored_at,omitempty"`
}

// NewWorkflowError instantiates a new WorkflowError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkflowError() *WorkflowError {
	this := WorkflowError{}
	return &this
}

// NewWorkflowErrorWithDefaults instantiates a new WorkflowError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkflowErrorWithDefaults() *WorkflowError {
	this := WorkflowError{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *WorkflowError) GetError() Error {
	if o == nil || o.Error == nil {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowError) GetErrorOk() (*Error, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *WorkflowError) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *WorkflowError) SetError(v Error) {
	o.Error = &v
}

// GetErroredAt returns the ErroredAt field value if set, zero value otherwise.
func (o *WorkflowError) GetErroredAt() time.Time {
	if o == nil || o.ErroredAt == nil {
		var ret time.Time
		return ret
	}
	return *o.ErroredAt
}

// GetErroredAtOk returns a tuple with the ErroredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkflowError) GetErroredAtOk() (*time.Time, bool) {
	if o == nil || o.ErroredAt == nil {
		return nil, false
	}
	return o.ErroredAt, true
}

// HasErroredAt returns a boolean if a field has been set.
func (o *WorkflowError) HasErroredAt() bool {
	if o != nil && o.ErroredAt != nil {
		return true
	}

	return false
}

// SetErroredAt gets a reference to the given time.Time and assigns it to the ErroredAt field.
func (o *WorkflowError) SetErroredAt(v time.Time) {
	o.ErroredAt = &v
}

func (o WorkflowError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.ErroredAt != nil {
		toSerialize["errored_at"] = o.ErroredAt
	}
	return json.Marshal(toSerialize)
}

type NullableWorkflowError struct {
	value *WorkflowError
	isSet bool
}

func (v NullableWorkflowError) Get() *WorkflowError {
	return v.value
}

func (v *NullableWorkflowError) Set(val *WorkflowError) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowError) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowError(val *WorkflowError) *NullableWorkflowError {
	return &NullableWorkflowError{value: val, isSet: true}
}

func (v NullableWorkflowError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
