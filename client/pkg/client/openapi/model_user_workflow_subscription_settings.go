/*
 * Relay API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v20200615
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserWorkflowSubscriptionSettings User workflow subscription settings
type UserWorkflowSubscriptionSettings struct {
	Approval *UserSubscriptionChannels `json:"approval,omitempty"`
	Failure *UserSubscriptionChannels `json:"failure,omitempty"`
	Success *UserSubscriptionChannels `json:"success,omitempty"`
}

// NewUserWorkflowSubscriptionSettings instantiates a new UserWorkflowSubscriptionSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserWorkflowSubscriptionSettings() *UserWorkflowSubscriptionSettings {
	this := UserWorkflowSubscriptionSettings{}
	return &this
}

// NewUserWorkflowSubscriptionSettingsWithDefaults instantiates a new UserWorkflowSubscriptionSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWorkflowSubscriptionSettingsWithDefaults() *UserWorkflowSubscriptionSettings {
	this := UserWorkflowSubscriptionSettings{}
	return &this
}

// GetApproval returns the Approval field value if set, zero value otherwise.
func (o *UserWorkflowSubscriptionSettings) GetApproval() UserSubscriptionChannels {
	if o == nil || o.Approval == nil {
		var ret UserSubscriptionChannels
		return ret
	}
	return *o.Approval
}

// GetApprovalOk returns a tuple with the Approval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserWorkflowSubscriptionSettings) GetApprovalOk() (*UserSubscriptionChannels, bool) {
	if o == nil || o.Approval == nil {
		return nil, false
	}
	return o.Approval, true
}

// HasApproval returns a boolean if a field has been set.
func (o *UserWorkflowSubscriptionSettings) HasApproval() bool {
	if o != nil && o.Approval != nil {
		return true
	}

	return false
}

// SetApproval gets a reference to the given UserSubscriptionChannels and assigns it to the Approval field.
func (o *UserWorkflowSubscriptionSettings) SetApproval(v UserSubscriptionChannels) {
	o.Approval = &v
}

// GetFailure returns the Failure field value if set, zero value otherwise.
func (o *UserWorkflowSubscriptionSettings) GetFailure() UserSubscriptionChannels {
	if o == nil || o.Failure == nil {
		var ret UserSubscriptionChannels
		return ret
	}
	return *o.Failure
}

// GetFailureOk returns a tuple with the Failure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserWorkflowSubscriptionSettings) GetFailureOk() (*UserSubscriptionChannels, bool) {
	if o == nil || o.Failure == nil {
		return nil, false
	}
	return o.Failure, true
}

// HasFailure returns a boolean if a field has been set.
func (o *UserWorkflowSubscriptionSettings) HasFailure() bool {
	if o != nil && o.Failure != nil {
		return true
	}

	return false
}

// SetFailure gets a reference to the given UserSubscriptionChannels and assigns it to the Failure field.
func (o *UserWorkflowSubscriptionSettings) SetFailure(v UserSubscriptionChannels) {
	o.Failure = &v
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *UserWorkflowSubscriptionSettings) GetSuccess() UserSubscriptionChannels {
	if o == nil || o.Success == nil {
		var ret UserSubscriptionChannels
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserWorkflowSubscriptionSettings) GetSuccessOk() (*UserSubscriptionChannels, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *UserWorkflowSubscriptionSettings) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given UserSubscriptionChannels and assigns it to the Success field.
func (o *UserWorkflowSubscriptionSettings) SetSuccess(v UserSubscriptionChannels) {
	o.Success = &v
}

func (o UserWorkflowSubscriptionSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Approval != nil {
		toSerialize["approval"] = o.Approval
	}
	if o.Failure != nil {
		toSerialize["failure"] = o.Failure
	}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	return json.Marshal(toSerialize)
}

type NullableUserWorkflowSubscriptionSettings struct {
	value *UserWorkflowSubscriptionSettings
	isSet bool
}

func (v NullableUserWorkflowSubscriptionSettings) Get() *UserWorkflowSubscriptionSettings {
	return v.value
}

func (v *NullableUserWorkflowSubscriptionSettings) Set(val *UserWorkflowSubscriptionSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableUserWorkflowSubscriptionSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableUserWorkflowSubscriptionSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserWorkflowSubscriptionSettings(val *UserWorkflowSubscriptionSettings) *NullableUserWorkflowSubscriptionSettings {
	return &NullableUserWorkflowSubscriptionSettings{value: val, isSet: true}
}

func (v NullableUserWorkflowSubscriptionSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserWorkflowSubscriptionSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


