/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PlanPrice An account billing plan pricing model
type PlanPrice struct {
	// Whether or not this pricing model should be available to users
	Available bool `json:"available"`
	// Plan pricing model name
	Name string `json:"name"`
	// The unit of measure for the billing interval
	RecurringInterval NullableString `json:"recurring_interval,omitempty"`
	// How many interval units between each billing
	RecurringIntervalCount NullableInt32 `json:"recurring_interval_count,omitempty"`
	// Number of whole cents to be charged per unit, per billing interval
	UnitAmount NullableInt32 `json:"unit_amount,omitempty"`
}

// NewPlanPrice instantiates a new PlanPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanPrice(available bool, name string) *PlanPrice {
	this := PlanPrice{}
	this.Available = available
	this.Name = name
	return &this
}

// NewPlanPriceWithDefaults instantiates a new PlanPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanPriceWithDefaults() *PlanPrice {
	this := PlanPrice{}
	return &this
}

// GetAvailable returns the Available field value
func (o *PlanPrice) GetAvailable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Available
}

// GetAvailableOk returns a tuple with the Available field value
// and a boolean to check if the value has been set.
func (o *PlanPrice) GetAvailableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Available, true
}

// SetAvailable sets field value
func (o *PlanPrice) SetAvailable(v bool) {
	o.Available = v
}

// GetName returns the Name field value
func (o *PlanPrice) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PlanPrice) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PlanPrice) SetName(v string) {
	o.Name = v
}

// GetRecurringInterval returns the RecurringInterval field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlanPrice) GetRecurringInterval() string {
	if o == nil || o.RecurringInterval.Get() == nil {
		var ret string
		return ret
	}
	return *o.RecurringInterval.Get()
}

// GetRecurringIntervalOk returns a tuple with the RecurringInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanPrice) GetRecurringIntervalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecurringInterval.Get(), o.RecurringInterval.IsSet()
}

// HasRecurringInterval returns a boolean if a field has been set.
func (o *PlanPrice) HasRecurringInterval() bool {
	if o != nil && o.RecurringInterval.IsSet() {
		return true
	}

	return false
}

// SetRecurringInterval gets a reference to the given NullableString and assigns it to the RecurringInterval field.
func (o *PlanPrice) SetRecurringInterval(v string) {
	o.RecurringInterval.Set(&v)
}

// SetRecurringIntervalNil sets the value for RecurringInterval to be an explicit nil
func (o *PlanPrice) SetRecurringIntervalNil() {
	o.RecurringInterval.Set(nil)
}

// UnsetRecurringInterval ensures that no value is present for RecurringInterval, not even an explicit nil
func (o *PlanPrice) UnsetRecurringInterval() {
	o.RecurringInterval.Unset()
}

// GetRecurringIntervalCount returns the RecurringIntervalCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlanPrice) GetRecurringIntervalCount() int32 {
	if o == nil || o.RecurringIntervalCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.RecurringIntervalCount.Get()
}

// GetRecurringIntervalCountOk returns a tuple with the RecurringIntervalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanPrice) GetRecurringIntervalCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecurringIntervalCount.Get(), o.RecurringIntervalCount.IsSet()
}

// HasRecurringIntervalCount returns a boolean if a field has been set.
func (o *PlanPrice) HasRecurringIntervalCount() bool {
	if o != nil && o.RecurringIntervalCount.IsSet() {
		return true
	}

	return false
}

// SetRecurringIntervalCount gets a reference to the given NullableInt32 and assigns it to the RecurringIntervalCount field.
func (o *PlanPrice) SetRecurringIntervalCount(v int32) {
	o.RecurringIntervalCount.Set(&v)
}

// SetRecurringIntervalCountNil sets the value for RecurringIntervalCount to be an explicit nil
func (o *PlanPrice) SetRecurringIntervalCountNil() {
	o.RecurringIntervalCount.Set(nil)
}

// UnsetRecurringIntervalCount ensures that no value is present for RecurringIntervalCount, not even an explicit nil
func (o *PlanPrice) UnsetRecurringIntervalCount() {
	o.RecurringIntervalCount.Unset()
}

// GetUnitAmount returns the UnitAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlanPrice) GetUnitAmount() int32 {
	if o == nil || o.UnitAmount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.UnitAmount.Get()
}

// GetUnitAmountOk returns a tuple with the UnitAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlanPrice) GetUnitAmountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitAmount.Get(), o.UnitAmount.IsSet()
}

// HasUnitAmount returns a boolean if a field has been set.
func (o *PlanPrice) HasUnitAmount() bool {
	if o != nil && o.UnitAmount.IsSet() {
		return true
	}

	return false
}

// SetUnitAmount gets a reference to the given NullableInt32 and assigns it to the UnitAmount field.
func (o *PlanPrice) SetUnitAmount(v int32) {
	o.UnitAmount.Set(&v)
}

// SetUnitAmountNil sets the value for UnitAmount to be an explicit nil
func (o *PlanPrice) SetUnitAmountNil() {
	o.UnitAmount.Set(nil)
}

// UnsetUnitAmount ensures that no value is present for UnitAmount, not even an explicit nil
func (o *PlanPrice) UnsetUnitAmount() {
	o.UnitAmount.Unset()
}

func (o PlanPrice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["available"] = o.Available
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.RecurringInterval.IsSet() {
		toSerialize["recurring_interval"] = o.RecurringInterval.Get()
	}
	if o.RecurringIntervalCount.IsSet() {
		toSerialize["recurring_interval_count"] = o.RecurringIntervalCount.Get()
	}
	if o.UnitAmount.IsSet() {
		toSerialize["unit_amount"] = o.UnitAmount.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePlanPrice struct {
	value *PlanPrice
	isSet bool
}

func (v NullablePlanPrice) Get() *PlanPrice {
	return v.value
}

func (v *NullablePlanPrice) Set(val *PlanPrice) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanPrice) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanPrice(val *PlanPrice) *NullablePlanPrice {
	return &NullablePlanPrice{value: val, isSet: true}
}

func (v NullablePlanPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
