/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// WorkflowStep - An individual workflow step
type WorkflowStep struct {
	ApprovalWorkflowStep  *ApprovalWorkflowStep
	ContainerWorkflowStep *ContainerWorkflowStep
}

// ApprovalWorkflowStepAsWorkflowStep is a convenience function that returns ApprovalWorkflowStep wrapped in WorkflowStep
func ApprovalWorkflowStepAsWorkflowStep(v *ApprovalWorkflowStep) WorkflowStep {
	return WorkflowStep{
		ApprovalWorkflowStep: v,
	}
}

// ContainerWorkflowStepAsWorkflowStep is a convenience function that returns ContainerWorkflowStep wrapped in WorkflowStep
func ContainerWorkflowStepAsWorkflowStep(v *ContainerWorkflowStep) WorkflowStep {
	return WorkflowStep{
		ContainerWorkflowStep: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *WorkflowStep) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'ApprovalWorkflowStep'
	if jsonDict["type"] == "ApprovalWorkflowStep" {
		// try to unmarshal JSON data into ApprovalWorkflowStep
		err = json.Unmarshal(data, &dst.ApprovalWorkflowStep)
		if err == nil {
			return nil // data stored in dst.ApprovalWorkflowStep, return on the first match
		} else {
			dst.ApprovalWorkflowStep = nil
			return fmt.Errorf("Failed to unmarshal WorkflowStep as ApprovalWorkflowStep: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ContainerWorkflowStep'
	if jsonDict["type"] == "ContainerWorkflowStep" {
		// try to unmarshal JSON data into ContainerWorkflowStep
		err = json.Unmarshal(data, &dst.ContainerWorkflowStep)
		if err == nil {
			return nil // data stored in dst.ContainerWorkflowStep, return on the first match
		} else {
			dst.ContainerWorkflowStep = nil
			return fmt.Errorf("Failed to unmarshal WorkflowStep as ContainerWorkflowStep: %s", err.Error())
		}
	}

	// check if the discriminator value is 'approval'
	if jsonDict["type"] == "approval" {
		// try to unmarshal JSON data into ApprovalWorkflowStep
		err = json.Unmarshal(data, &dst.ApprovalWorkflowStep)
		if err == nil {
			return nil // data stored in dst.ApprovalWorkflowStep, return on the first match
		} else {
			dst.ApprovalWorkflowStep = nil
			return fmt.Errorf("Failed to unmarshal WorkflowStep as ApprovalWorkflowStep: %s", err.Error())
		}
	}

	// check if the discriminator value is 'container'
	if jsonDict["type"] == "container" {
		// try to unmarshal JSON data into ContainerWorkflowStep
		err = json.Unmarshal(data, &dst.ContainerWorkflowStep)
		if err == nil {
			return nil // data stored in dst.ContainerWorkflowStep, return on the first match
		} else {
			dst.ContainerWorkflowStep = nil
			return fmt.Errorf("Failed to unmarshal WorkflowStep as ContainerWorkflowStep: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src WorkflowStep) MarshalJSON() ([]byte, error) {
	if src.ApprovalWorkflowStep != nil {
		return json.Marshal(&src.ApprovalWorkflowStep)
	}

	if src.ContainerWorkflowStep != nil {
		return json.Marshal(&src.ContainerWorkflowStep)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *WorkflowStep) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ApprovalWorkflowStep != nil {
		return obj.ApprovalWorkflowStep
	}

	if obj.ContainerWorkflowStep != nil {
		return obj.ContainerWorkflowStep
	}

	// all schemas are nil
	return nil
}

type NullableWorkflowStep struct {
	value *WorkflowStep
	isSet bool
}

func (v NullableWorkflowStep) Get() *WorkflowStep {
	return v.value
}

func (v *NullableWorkflowStep) Set(val *WorkflowStep) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkflowStep) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkflowStep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkflowStep(val *WorkflowStep) *NullableWorkflowStep {
	return &NullableWorkflowStep{value: val, isSet: true}
}

func (v NullableWorkflowStep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkflowStep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
