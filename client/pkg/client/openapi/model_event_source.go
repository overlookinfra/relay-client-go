/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// EventSource - The event source for an event
type EventSource struct {
	EventSourceTrigger *EventSourceTrigger
}

// EventSourceTriggerAsEventSource is a convenience function that returns EventSourceTrigger wrapped in EventSource
func EventSourceTriggerAsEventSource(v *EventSourceTrigger) EventSource {
	return EventSource{ EventSourceTrigger: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EventSource) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'EventSourceTrigger'
	if jsonDict["type"] == "EventSourceTrigger" {
		// try to unmarshal JSON data into EventSourceTrigger
		err = json.Unmarshal(data, &dst.EventSourceTrigger)
		if err == nil {
			return nil // data stored in dst.EventSourceTrigger, return on the first match
		} else {
			dst.EventSourceTrigger = nil
			return fmt.Errorf("Failed to unmarshal EventSource as EventSourceTrigger: %s", err.Error())
		}
	}

	// check if the discriminator value is 'trigger'
	if jsonDict["type"] == "trigger" {
		// try to unmarshal JSON data into EventSourceTrigger
		err = json.Unmarshal(data, &dst.EventSourceTrigger)
		if err == nil {
			return nil // data stored in dst.EventSourceTrigger, return on the first match
		} else {
			dst.EventSourceTrigger = nil
			return fmt.Errorf("Failed to unmarshal EventSource as EventSourceTrigger: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EventSource) MarshalJSON() ([]byte, error) {
	if src.EventSourceTrigger != nil {
		return json.Marshal(&src.EventSourceTrigger)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EventSource) GetActualInstance() (interface{}) {
	if obj.EventSourceTrigger != nil {
		return obj.EventSourceTrigger
	}

	// all schemas are nil
	return nil
}

type NullableEventSource struct {
	value *EventSource
	isSet bool
}

func (v NullableEventSource) Get() *EventSource {
	return v.value
}

func (v *NullableEventSource) Set(val *EventSource) {
	v.value = val
	v.isSet = true
}

func (v NullableEventSource) IsSet() bool {
	return v.isSet
}

func (v *NullableEventSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventSource(val *EventSource) *NullableEventSource {
	return &NullableEventSource{value: val, isSet: true}
}

func (v NullableEventSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


