/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EntitlementPlan A subscription plan for a specific product entitlement
type EntitlementPlan struct {
	// Visible subscription plan name
	Name string `json:"name"`
	// Unique subscription plan identifier
	Slug string `json:"slug"`
	// Whether or not this plan is available to users
	Available bool `json:"available"`
	// Pricing models associated with this plan
	Prices []EntitlementPlanPrice `json:"prices"`
}

// NewEntitlementPlan instantiates a new EntitlementPlan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntitlementPlan(name string, slug string, available bool, prices []EntitlementPlanPrice) *EntitlementPlan {
	this := EntitlementPlan{}
	this.Name = name
	this.Slug = slug
	this.Available = available
	this.Prices = prices
	return &this
}

// NewEntitlementPlanWithDefaults instantiates a new EntitlementPlan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntitlementPlanWithDefaults() *EntitlementPlan {
	this := EntitlementPlan{}
	return &this
}

// GetName returns the Name field value
func (o *EntitlementPlan) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EntitlementPlan) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EntitlementPlan) SetName(v string) {
	o.Name = v
}

// GetSlug returns the Slug field value
func (o *EntitlementPlan) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *EntitlementPlan) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *EntitlementPlan) SetSlug(v string) {
	o.Slug = v
}

// GetAvailable returns the Available field value
func (o *EntitlementPlan) GetAvailable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Available
}

// GetAvailableOk returns a tuple with the Available field value
// and a boolean to check if the value has been set.
func (o *EntitlementPlan) GetAvailableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Available, true
}

// SetAvailable sets field value
func (o *EntitlementPlan) SetAvailable(v bool) {
	o.Available = v
}

// GetPrices returns the Prices field value
func (o *EntitlementPlan) GetPrices() []EntitlementPlanPrice {
	if o == nil {
		var ret []EntitlementPlanPrice
		return ret
	}

	return o.Prices
}

// GetPricesOk returns a tuple with the Prices field value
// and a boolean to check if the value has been set.
func (o *EntitlementPlan) GetPricesOk() ([]EntitlementPlanPrice, bool) {
	if o == nil {
		return nil, false
	}
	return o.Prices, true
}

// SetPrices sets field value
func (o *EntitlementPlan) SetPrices(v []EntitlementPlanPrice) {
	o.Prices = v
}

func (o EntitlementPlan) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["slug"] = o.Slug
	}
	if true {
		toSerialize["available"] = o.Available
	}
	if true {
		toSerialize["prices"] = o.Prices
	}
	return json.Marshal(toSerialize)
}

type NullableEntitlementPlan struct {
	value *EntitlementPlan
	isSet bool
}

func (v NullableEntitlementPlan) Get() *EntitlementPlan {
	return v.value
}

func (v *NullableEntitlementPlan) Set(val *EntitlementPlan) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitlementPlan) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitlementPlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitlementPlan(val *EntitlementPlan) *NullableEntitlementPlan {
	return &NullableEntitlementPlan{value: val, isSet: true}
}

func (v NullableEntitlementPlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitlementPlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
