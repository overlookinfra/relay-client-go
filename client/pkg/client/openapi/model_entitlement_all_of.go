/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EntitlementAllOf struct for EntitlementAllOf
type EntitlementAllOf struct {
	// The subscription plans associated with this entitlement
	Plans []EntitlementPlan `json:"plans"`
}

// NewEntitlementAllOf instantiates a new EntitlementAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntitlementAllOf(plans []EntitlementPlan) *EntitlementAllOf {
	this := EntitlementAllOf{}
	this.Plans = plans
	return &this
}

// NewEntitlementAllOfWithDefaults instantiates a new EntitlementAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntitlementAllOfWithDefaults() *EntitlementAllOf {
	this := EntitlementAllOf{}
	return &this
}

// GetPlans returns the Plans field value
func (o *EntitlementAllOf) GetPlans() []EntitlementPlan {
	if o == nil {
		var ret []EntitlementPlan
		return ret
	}

	return o.Plans
}

// GetPlansOk returns a tuple with the Plans field value
// and a boolean to check if the value has been set.
func (o *EntitlementAllOf) GetPlansOk() ([]EntitlementPlan, bool) {
	if o == nil {
		return nil, false
	}
	return o.Plans, true
}

// SetPlans sets field value
func (o *EntitlementAllOf) SetPlans(v []EntitlementPlan) {
	o.Plans = v
}

func (o EntitlementAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["plans"] = o.Plans
	}
	return json.Marshal(toSerialize)
}

type NullableEntitlementAllOf struct {
	value *EntitlementAllOf
	isSet bool
}

func (v NullableEntitlementAllOf) Get() *EntitlementAllOf {
	return v.value
}

func (v *NullableEntitlementAllOf) Set(val *EntitlementAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitlementAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitlementAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitlementAllOf(val *EntitlementAllOf) *NullableEntitlementAllOf {
	return &NullableEntitlementAllOf{value: val, isSet: true}
}

func (v NullableEntitlementAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitlementAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
