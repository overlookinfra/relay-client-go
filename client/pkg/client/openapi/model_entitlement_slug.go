/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EntitlementSlug A unique identifier for a product entitlement
type EntitlementSlug struct {
	// Product entitlement reference identifier
	Slug string `json:"slug"`
}

// NewEntitlementSlug instantiates a new EntitlementSlug object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntitlementSlug(slug string) *EntitlementSlug {
	this := EntitlementSlug{}
	this.Slug = slug
	return &this
}

// NewEntitlementSlugWithDefaults instantiates a new EntitlementSlug object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntitlementSlugWithDefaults() *EntitlementSlug {
	this := EntitlementSlug{}
	return &this
}

// GetSlug returns the Slug field value
func (o *EntitlementSlug) GetSlug() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Slug
}

// GetSlugOk returns a tuple with the Slug field value
// and a boolean to check if the value has been set.
func (o *EntitlementSlug) GetSlugOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Slug, true
}

// SetSlug sets field value
func (o *EntitlementSlug) SetSlug(v string) {
	o.Slug = v
}

func (o EntitlementSlug) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["slug"] = o.Slug
	}
	return json.Marshal(toSerialize)
}

type NullableEntitlementSlug struct {
	value *EntitlementSlug
	isSet bool
}

func (v NullableEntitlementSlug) Get() *EntitlementSlug {
	return v.value
}

func (v *NullableEntitlementSlug) Set(val *EntitlementSlug) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitlementSlug) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitlementSlug) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitlementSlug(val *EntitlementSlug) *NullableEntitlementSlug {
	return &NullableEntitlementSlug{value: val, isSet: true}
}

func (v NullableEntitlementSlug) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitlementSlug) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
