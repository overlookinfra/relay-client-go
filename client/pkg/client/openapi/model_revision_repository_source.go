/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RevisionRepositorySource struct for RevisionRepositorySource
type RevisionRepositorySource struct {
	SourceData *RevisionRepositorySourceSourceData `json:"source_data,omitempty"`
	// Where this revision originated from
	SourceType *string `json:"source_type,omitempty"`
}

// NewRevisionRepositorySource instantiates a new RevisionRepositorySource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevisionRepositorySource() *RevisionRepositorySource {
	this := RevisionRepositorySource{}
	return &this
}

// NewRevisionRepositorySourceWithDefaults instantiates a new RevisionRepositorySource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevisionRepositorySourceWithDefaults() *RevisionRepositorySource {
	this := RevisionRepositorySource{}
	return &this
}

// GetSourceData returns the SourceData field value if set, zero value otherwise.
func (o *RevisionRepositorySource) GetSourceData() RevisionRepositorySourceSourceData {
	if o == nil || o.SourceData == nil {
		var ret RevisionRepositorySourceSourceData
		return ret
	}
	return *o.SourceData
}

// GetSourceDataOk returns a tuple with the SourceData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevisionRepositorySource) GetSourceDataOk() (*RevisionRepositorySourceSourceData, bool) {
	if o == nil || o.SourceData == nil {
		return nil, false
	}
	return o.SourceData, true
}

// HasSourceData returns a boolean if a field has been set.
func (o *RevisionRepositorySource) HasSourceData() bool {
	if o != nil && o.SourceData != nil {
		return true
	}

	return false
}

// SetSourceData gets a reference to the given RevisionRepositorySourceSourceData and assigns it to the SourceData field.
func (o *RevisionRepositorySource) SetSourceData(v RevisionRepositorySourceSourceData) {
	o.SourceData = &v
}

// GetSourceType returns the SourceType field value if set, zero value otherwise.
func (o *RevisionRepositorySource) GetSourceType() string {
	if o == nil || o.SourceType == nil {
		var ret string
		return ret
	}
	return *o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevisionRepositorySource) GetSourceTypeOk() (*string, bool) {
	if o == nil || o.SourceType == nil {
		return nil, false
	}
	return o.SourceType, true
}

// HasSourceType returns a boolean if a field has been set.
func (o *RevisionRepositorySource) HasSourceType() bool {
	if o != nil && o.SourceType != nil {
		return true
	}

	return false
}

// SetSourceType gets a reference to the given string and assigns it to the SourceType field.
func (o *RevisionRepositorySource) SetSourceType(v string) {
	o.SourceType = &v
}

func (o RevisionRepositorySource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SourceData != nil {
		toSerialize["source_data"] = o.SourceData
	}
	if o.SourceType != nil {
		toSerialize["source_type"] = o.SourceType
	}
	return json.Marshal(toSerialize)
}

type NullableRevisionRepositorySource struct {
	value *RevisionRepositorySource
	isSet bool
}

func (v NullableRevisionRepositorySource) Get() *RevisionRepositorySource {
	return v.value
}

func (v *NullableRevisionRepositorySource) Set(val *RevisionRepositorySource) {
	v.value = val
	v.isSet = true
}

func (v NullableRevisionRepositorySource) IsSet() bool {
	return v.isSet
}

func (v *NullableRevisionRepositorySource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevisionRepositorySource(val *RevisionRepositorySource) *NullableRevisionRepositorySource {
	return &NullableRevisionRepositorySource{value: val, isSet: true}
}

func (v NullableRevisionRepositorySource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevisionRepositorySource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


