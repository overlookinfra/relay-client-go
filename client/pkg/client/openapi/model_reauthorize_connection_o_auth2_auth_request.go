/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ReauthorizeConnectionOAuth2AuthRequest Fields to start an OAuth 2.0 authentication flow
type ReauthorizeConnectionOAuth2AuthRequest struct {
	// The set of capabilities to enable for a connection
	Capabilities []ConnectionProviderCapability `json:"capabilities"`
	// Additional scopes to explicitly request
	Scopes []string `json:"scopes,omitempty"`
	// State to return to the requestor if the authentication succeeds
	State interface{} `json:"state,omitempty"`
}

// NewReauthorizeConnectionOAuth2AuthRequest instantiates a new ReauthorizeConnectionOAuth2AuthRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReauthorizeConnectionOAuth2AuthRequest(capabilities []ConnectionProviderCapability) *ReauthorizeConnectionOAuth2AuthRequest {
	this := ReauthorizeConnectionOAuth2AuthRequest{}
	this.Capabilities = capabilities
	return &this
}

// NewReauthorizeConnectionOAuth2AuthRequestWithDefaults instantiates a new ReauthorizeConnectionOAuth2AuthRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReauthorizeConnectionOAuth2AuthRequestWithDefaults() *ReauthorizeConnectionOAuth2AuthRequest {
	this := ReauthorizeConnectionOAuth2AuthRequest{}
	return &this
}

// GetCapabilities returns the Capabilities field value
func (o *ReauthorizeConnectionOAuth2AuthRequest) GetCapabilities() []ConnectionProviderCapability {
	if o == nil {
		var ret []ConnectionProviderCapability
		return ret
	}

	return o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value
// and a boolean to check if the value has been set.
func (o *ReauthorizeConnectionOAuth2AuthRequest) GetCapabilitiesOk() ([]ConnectionProviderCapability, bool) {
	if o == nil {
		return nil, false
	}
	return o.Capabilities, true
}

// SetCapabilities sets field value
func (o *ReauthorizeConnectionOAuth2AuthRequest) SetCapabilities(v []ConnectionProviderCapability) {
	o.Capabilities = v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *ReauthorizeConnectionOAuth2AuthRequest) GetScopes() []string {
	if o == nil || o.Scopes == nil {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReauthorizeConnectionOAuth2AuthRequest) GetScopesOk() ([]string, bool) {
	if o == nil || o.Scopes == nil {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *ReauthorizeConnectionOAuth2AuthRequest) HasScopes() bool {
	if o != nil && o.Scopes != nil {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *ReauthorizeConnectionOAuth2AuthRequest) SetScopes(v []string) {
	o.Scopes = v
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReauthorizeConnectionOAuth2AuthRequest) GetState() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReauthorizeConnectionOAuth2AuthRequest) GetStateOk() (*interface{}, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return &o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ReauthorizeConnectionOAuth2AuthRequest) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given interface{} and assigns it to the State field.
func (o *ReauthorizeConnectionOAuth2AuthRequest) SetState(v interface{}) {
	o.State = v
}

func (o ReauthorizeConnectionOAuth2AuthRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["capabilities"] = o.Capabilities
	}
	if o.Scopes != nil {
		toSerialize["scopes"] = o.Scopes
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableReauthorizeConnectionOAuth2AuthRequest struct {
	value *ReauthorizeConnectionOAuth2AuthRequest
	isSet bool
}

func (v NullableReauthorizeConnectionOAuth2AuthRequest) Get() *ReauthorizeConnectionOAuth2AuthRequest {
	return v.value
}

func (v *NullableReauthorizeConnectionOAuth2AuthRequest) Set(val *ReauthorizeConnectionOAuth2AuthRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReauthorizeConnectionOAuth2AuthRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReauthorizeConnectionOAuth2AuthRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReauthorizeConnectionOAuth2AuthRequest(val *ReauthorizeConnectionOAuth2AuthRequest) *NullableReauthorizeConnectionOAuth2AuthRequest {
	return &NullableReauthorizeConnectionOAuth2AuthRequest{value: val, isSet: true}
}

func (v NullableReauthorizeConnectionOAuth2AuthRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReauthorizeConnectionOAuth2AuthRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
