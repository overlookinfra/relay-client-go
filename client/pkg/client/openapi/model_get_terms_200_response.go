/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GetTerms200Response struct for GetTerms200Response
type GetTerms200Response struct {
	Access *EntityAccess `json:"access,omitempty"`
	Terms  *Terms        `json:"terms,omitempty"`
}

// NewGetTerms200Response instantiates a new GetTerms200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetTerms200Response() *GetTerms200Response {
	this := GetTerms200Response{}
	return &this
}

// NewGetTerms200ResponseWithDefaults instantiates a new GetTerms200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetTerms200ResponseWithDefaults() *GetTerms200Response {
	this := GetTerms200Response{}
	return &this
}

// GetAccess returns the Access field value if set, zero value otherwise.
func (o *GetTerms200Response) GetAccess() EntityAccess {
	if o == nil || o.Access == nil {
		var ret EntityAccess
		return ret
	}
	return *o.Access
}

// GetAccessOk returns a tuple with the Access field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetTerms200Response) GetAccessOk() (*EntityAccess, bool) {
	if o == nil || o.Access == nil {
		return nil, false
	}
	return o.Access, true
}

// HasAccess returns a boolean if a field has been set.
func (o *GetTerms200Response) HasAccess() bool {
	if o != nil && o.Access != nil {
		return true
	}

	return false
}

// SetAccess gets a reference to the given EntityAccess and assigns it to the Access field.
func (o *GetTerms200Response) SetAccess(v EntityAccess) {
	o.Access = &v
}

// GetTerms returns the Terms field value if set, zero value otherwise.
func (o *GetTerms200Response) GetTerms() Terms {
	if o == nil || o.Terms == nil {
		var ret Terms
		return ret
	}
	return *o.Terms
}

// GetTermsOk returns a tuple with the Terms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetTerms200Response) GetTermsOk() (*Terms, bool) {
	if o == nil || o.Terms == nil {
		return nil, false
	}
	return o.Terms, true
}

// HasTerms returns a boolean if a field has been set.
func (o *GetTerms200Response) HasTerms() bool {
	if o != nil && o.Terms != nil {
		return true
	}

	return false
}

// SetTerms gets a reference to the given Terms and assigns it to the Terms field.
func (o *GetTerms200Response) SetTerms(v Terms) {
	o.Terms = &v
}

func (o GetTerms200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Access != nil {
		toSerialize["access"] = o.Access
	}
	if o.Terms != nil {
		toSerialize["terms"] = o.Terms
	}
	return json.Marshal(toSerialize)
}

type NullableGetTerms200Response struct {
	value *GetTerms200Response
	isSet bool
}

func (v NullableGetTerms200Response) Get() *GetTerms200Response {
	return v.value
}

func (v *NullableGetTerms200Response) Set(val *GetTerms200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGetTerms200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGetTerms200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetTerms200Response(val *GetTerms200Response) *NullableGetTerms200Response {
	return &NullableGetTerms200Response{value: val, isSet: true}
}

func (v NullableGetTerms200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetTerms200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
