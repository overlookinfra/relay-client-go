/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ContainerWorkflowStep struct for ContainerWorkflowStep
type ContainerWorkflowStep struct {
	// Step names that must complete before this one starts
	DependsOn *[]string `json:"depends_on,omitempty"`
	// A user provided step name. Must be unique within the workflow definition
	Name       string                  `json:"name"`
	References *WorkflowDataReferences `json:"references,omitempty"`
	// An expression evaluated by the backend
	When interface{} `json:"when,omitempty"`
	// Command arguments
	Args *[]string `json:"args,omitempty"`
	// Command to issue
	Command *string `json:"command,omitempty"`
	// Environment variable data to provide to the container
	Env *map[string]interface{} `json:"env,omitempty"`
	// Container image on which step is executed
	Image string `json:"image"`
	// Input script to execute
	Input *[]string `json:"input,omitempty"`
	// A URL to a script to run
	InputFile *string `json:"inputFile,omitempty"`
	// Variable specification data to provide to the container
	Spec *map[string]interface{} `json:"spec,omitempty"`
	// Type of step
	Type string `json:"type"`
}

// NewContainerWorkflowStep instantiates a new ContainerWorkflowStep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerWorkflowStep(name string, image string, type_ string) *ContainerWorkflowStep {
	this := ContainerWorkflowStep{}
	this.Name = name
	this.Image = image
	this.Type = type_
	return &this
}

// NewContainerWorkflowStepWithDefaults instantiates a new ContainerWorkflowStep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerWorkflowStepWithDefaults() *ContainerWorkflowStep {
	this := ContainerWorkflowStep{}
	return &this
}

// GetDependsOn returns the DependsOn field value if set, zero value otherwise.
func (o *ContainerWorkflowStep) GetDependsOn() []string {
	if o == nil || o.DependsOn == nil {
		var ret []string
		return ret
	}
	return *o.DependsOn
}

// GetDependsOnOk returns a tuple with the DependsOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerWorkflowStep) GetDependsOnOk() (*[]string, bool) {
	if o == nil || o.DependsOn == nil {
		return nil, false
	}
	return o.DependsOn, true
}

// HasDependsOn returns a boolean if a field has been set.
func (o *ContainerWorkflowStep) HasDependsOn() bool {
	if o != nil && o.DependsOn != nil {
		return true
	}

	return false
}

// SetDependsOn gets a reference to the given []string and assigns it to the DependsOn field.
func (o *ContainerWorkflowStep) SetDependsOn(v []string) {
	o.DependsOn = &v
}

// GetName returns the Name field value
func (o *ContainerWorkflowStep) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ContainerWorkflowStep) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ContainerWorkflowStep) SetName(v string) {
	o.Name = v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *ContainerWorkflowStep) GetReferences() WorkflowDataReferences {
	if o == nil || o.References == nil {
		var ret WorkflowDataReferences
		return ret
	}
	return *o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerWorkflowStep) GetReferencesOk() (*WorkflowDataReferences, bool) {
	if o == nil || o.References == nil {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *ContainerWorkflowStep) HasReferences() bool {
	if o != nil && o.References != nil {
		return true
	}

	return false
}

// SetReferences gets a reference to the given WorkflowDataReferences and assigns it to the References field.
func (o *ContainerWorkflowStep) SetReferences(v WorkflowDataReferences) {
	o.References = &v
}

// GetWhen returns the When field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerWorkflowStep) GetWhen() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.When
}

// GetWhenOk returns a tuple with the When field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerWorkflowStep) GetWhenOk() (*interface{}, bool) {
	if o == nil || o.When == nil {
		return nil, false
	}
	return &o.When, true
}

// HasWhen returns a boolean if a field has been set.
func (o *ContainerWorkflowStep) HasWhen() bool {
	if o != nil && o.When != nil {
		return true
	}

	return false
}

// SetWhen gets a reference to the given interface{} and assigns it to the When field.
func (o *ContainerWorkflowStep) SetWhen(v interface{}) {
	o.When = v
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *ContainerWorkflowStep) GetArgs() []string {
	if o == nil || o.Args == nil {
		var ret []string
		return ret
	}
	return *o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerWorkflowStep) GetArgsOk() (*[]string, bool) {
	if o == nil || o.Args == nil {
		return nil, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *ContainerWorkflowStep) HasArgs() bool {
	if o != nil && o.Args != nil {
		return true
	}

	return false
}

// SetArgs gets a reference to the given []string and assigns it to the Args field.
func (o *ContainerWorkflowStep) SetArgs(v []string) {
	o.Args = &v
}

// GetCommand returns the Command field value if set, zero value otherwise.
func (o *ContainerWorkflowStep) GetCommand() string {
	if o == nil || o.Command == nil {
		var ret string
		return ret
	}
	return *o.Command
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerWorkflowStep) GetCommandOk() (*string, bool) {
	if o == nil || o.Command == nil {
		return nil, false
	}
	return o.Command, true
}

// HasCommand returns a boolean if a field has been set.
func (o *ContainerWorkflowStep) HasCommand() bool {
	if o != nil && o.Command != nil {
		return true
	}

	return false
}

// SetCommand gets a reference to the given string and assigns it to the Command field.
func (o *ContainerWorkflowStep) SetCommand(v string) {
	o.Command = &v
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *ContainerWorkflowStep) GetEnv() map[string]interface{} {
	if o == nil || o.Env == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerWorkflowStep) GetEnvOk() (*map[string]interface{}, bool) {
	if o == nil || o.Env == nil {
		return nil, false
	}
	return o.Env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *ContainerWorkflowStep) HasEnv() bool {
	if o != nil && o.Env != nil {
		return true
	}

	return false
}

// SetEnv gets a reference to the given map[string]interface{} and assigns it to the Env field.
func (o *ContainerWorkflowStep) SetEnv(v map[string]interface{}) {
	o.Env = &v
}

// GetImage returns the Image field value
func (o *ContainerWorkflowStep) GetImage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Image
}

// GetImageOk returns a tuple with the Image field value
// and a boolean to check if the value has been set.
func (o *ContainerWorkflowStep) GetImageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Image, true
}

// SetImage sets field value
func (o *ContainerWorkflowStep) SetImage(v string) {
	o.Image = v
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *ContainerWorkflowStep) GetInput() []string {
	if o == nil || o.Input == nil {
		var ret []string
		return ret
	}
	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerWorkflowStep) GetInputOk() (*[]string, bool) {
	if o == nil || o.Input == nil {
		return nil, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *ContainerWorkflowStep) HasInput() bool {
	if o != nil && o.Input != nil {
		return true
	}

	return false
}

// SetInput gets a reference to the given []string and assigns it to the Input field.
func (o *ContainerWorkflowStep) SetInput(v []string) {
	o.Input = &v
}

// GetInputFile returns the InputFile field value if set, zero value otherwise.
func (o *ContainerWorkflowStep) GetInputFile() string {
	if o == nil || o.InputFile == nil {
		var ret string
		return ret
	}
	return *o.InputFile
}

// GetInputFileOk returns a tuple with the InputFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerWorkflowStep) GetInputFileOk() (*string, bool) {
	if o == nil || o.InputFile == nil {
		return nil, false
	}
	return o.InputFile, true
}

// HasInputFile returns a boolean if a field has been set.
func (o *ContainerWorkflowStep) HasInputFile() bool {
	if o != nil && o.InputFile != nil {
		return true
	}

	return false
}

// SetInputFile gets a reference to the given string and assigns it to the InputFile field.
func (o *ContainerWorkflowStep) SetInputFile(v string) {
	o.InputFile = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *ContainerWorkflowStep) GetSpec() map[string]interface{} {
	if o == nil || o.Spec == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContainerWorkflowStep) GetSpecOk() (*map[string]interface{}, bool) {
	if o == nil || o.Spec == nil {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *ContainerWorkflowStep) HasSpec() bool {
	if o != nil && o.Spec != nil {
		return true
	}

	return false
}

// SetSpec gets a reference to the given map[string]interface{} and assigns it to the Spec field.
func (o *ContainerWorkflowStep) SetSpec(v map[string]interface{}) {
	o.Spec = &v
}

// GetType returns the Type field value
func (o *ContainerWorkflowStep) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ContainerWorkflowStep) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ContainerWorkflowStep) SetType(v string) {
	o.Type = v
}

func (o ContainerWorkflowStep) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DependsOn != nil {
		toSerialize["depends_on"] = o.DependsOn
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.References != nil {
		toSerialize["references"] = o.References
	}
	if o.When != nil {
		toSerialize["when"] = o.When
	}
	if o.Args != nil {
		toSerialize["args"] = o.Args
	}
	if o.Command != nil {
		toSerialize["command"] = o.Command
	}
	if o.Env != nil {
		toSerialize["env"] = o.Env
	}
	if true {
		toSerialize["image"] = o.Image
	}
	if o.Input != nil {
		toSerialize["input"] = o.Input
	}
	if o.InputFile != nil {
		toSerialize["inputFile"] = o.InputFile
	}
	if o.Spec != nil {
		toSerialize["spec"] = o.Spec
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableContainerWorkflowStep struct {
	value *ContainerWorkflowStep
	isSet bool
}

func (v NullableContainerWorkflowStep) Get() *ContainerWorkflowStep {
	return v.value
}

func (v *NullableContainerWorkflowStep) Set(val *ContainerWorkflowStep) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerWorkflowStep) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerWorkflowStep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerWorkflowStep(val *ContainerWorkflowStep) *NullableContainerWorkflowStep {
	return &NullableContainerWorkflowStep{value: val, isSet: true}
}

func (v NullableContainerWorkflowStep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerWorkflowStep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
