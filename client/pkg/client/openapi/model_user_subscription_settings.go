/*
 * Relay API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v20200615
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserSubscriptionSettings User subscription settings
type UserSubscriptionSettings struct {
	Workflows *UserWorkflowSubscriptionSettings `json:"workflows,omitempty"`
}

// NewUserSubscriptionSettings instantiates a new UserSubscriptionSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSubscriptionSettings() *UserSubscriptionSettings {
	this := UserSubscriptionSettings{}
	return &this
}

// NewUserSubscriptionSettingsWithDefaults instantiates a new UserSubscriptionSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSubscriptionSettingsWithDefaults() *UserSubscriptionSettings {
	this := UserSubscriptionSettings{}
	return &this
}

// GetWorkflows returns the Workflows field value if set, zero value otherwise.
func (o *UserSubscriptionSettings) GetWorkflows() UserWorkflowSubscriptionSettings {
	if o == nil || o.Workflows == nil {
		var ret UserWorkflowSubscriptionSettings
		return ret
	}
	return *o.Workflows
}

// GetWorkflowsOk returns a tuple with the Workflows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSubscriptionSettings) GetWorkflowsOk() (*UserWorkflowSubscriptionSettings, bool) {
	if o == nil || o.Workflows == nil {
		return nil, false
	}
	return o.Workflows, true
}

// HasWorkflows returns a boolean if a field has been set.
func (o *UserSubscriptionSettings) HasWorkflows() bool {
	if o != nil && o.Workflows != nil {
		return true
	}

	return false
}

// SetWorkflows gets a reference to the given UserWorkflowSubscriptionSettings and assigns it to the Workflows field.
func (o *UserSubscriptionSettings) SetWorkflows(v UserWorkflowSubscriptionSettings) {
	o.Workflows = &v
}

func (o UserSubscriptionSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Workflows != nil {
		toSerialize["workflows"] = o.Workflows
	}
	return json.Marshal(toSerialize)
}

type NullableUserSubscriptionSettings struct {
	value *UserSubscriptionSettings
	isSet bool
}

func (v NullableUserSubscriptionSettings) Get() *UserSubscriptionSettings {
	return v.value
}

func (v *NullableUserSubscriptionSettings) Set(val *UserSubscriptionSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSubscriptionSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSubscriptionSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSubscriptionSettings(val *UserSubscriptionSettings) *NullableUserSubscriptionSettings {
	return &NullableUserSubscriptionSettings{value: val, isSet: true}
}

func (v NullableUserSubscriptionSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSubscriptionSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


