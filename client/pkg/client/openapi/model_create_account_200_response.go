/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// CreateAccount200Response Success response
type CreateAccount200Response struct {
	Account *Account       `json:"account,omitempty"`
	Invite  *InviteSummary `json:"invite,omitempty"`
}

// NewCreateAccount200Response instantiates a new CreateAccount200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAccount200Response() *CreateAccount200Response {
	this := CreateAccount200Response{}
	return &this
}

// NewCreateAccount200ResponseWithDefaults instantiates a new CreateAccount200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAccount200ResponseWithDefaults() *CreateAccount200Response {
	this := CreateAccount200Response{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *CreateAccount200Response) GetAccount() Account {
	if o == nil || o.Account == nil {
		var ret Account
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAccount200Response) GetAccountOk() (*Account, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *CreateAccount200Response) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given Account and assigns it to the Account field.
func (o *CreateAccount200Response) SetAccount(v Account) {
	o.Account = &v
}

// GetInvite returns the Invite field value if set, zero value otherwise.
func (o *CreateAccount200Response) GetInvite() InviteSummary {
	if o == nil || o.Invite == nil {
		var ret InviteSummary
		return ret
	}
	return *o.Invite
}

// GetInviteOk returns a tuple with the Invite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAccount200Response) GetInviteOk() (*InviteSummary, bool) {
	if o == nil || o.Invite == nil {
		return nil, false
	}
	return o.Invite, true
}

// HasInvite returns a boolean if a field has been set.
func (o *CreateAccount200Response) HasInvite() bool {
	if o != nil && o.Invite != nil {
		return true
	}

	return false
}

// SetInvite gets a reference to the given InviteSummary and assigns it to the Invite field.
func (o *CreateAccount200Response) SetInvite(v InviteSummary) {
	o.Invite = &v
}

func (o CreateAccount200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Account != nil {
		toSerialize["account"] = o.Account
	}
	if o.Invite != nil {
		toSerialize["invite"] = o.Invite
	}
	return json.Marshal(toSerialize)
}

type NullableCreateAccount200Response struct {
	value *CreateAccount200Response
	isSet bool
}

func (v NullableCreateAccount200Response) Get() *CreateAccount200Response {
	return v.value
}

func (v *NullableCreateAccount200Response) Set(val *CreateAccount200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAccount200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAccount200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAccount200Response(val *CreateAccount200Response) *NullableCreateAccount200Response {
	return &NullableCreateAccount200Response{value: val, isSet: true}
}

func (v NullableCreateAccount200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAccount200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
