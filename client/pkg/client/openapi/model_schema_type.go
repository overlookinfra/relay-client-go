/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SchemaType A value type
type SchemaType string

// List of SchemaType
const (
	STRING SchemaType = "string"
)

// All allowed values of SchemaType enum
var AllowedSchemaTypeEnumValues = []SchemaType{
	"string",
}

func (v *SchemaType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SchemaType(value)
	for _, existing := range AllowedSchemaTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SchemaType", value)
}

// NewSchemaTypeFromValue returns a pointer to a valid SchemaType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSchemaTypeFromValue(v string) (*SchemaType, error) {
	ev := SchemaType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SchemaType: valid values are %v", v, AllowedSchemaTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SchemaType) IsValid() bool {
	for _, existing := range AllowedSchemaTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SchemaType value
func (v SchemaType) Ptr() *SchemaType {
	return &v
}

type NullableSchemaType struct {
	value *SchemaType
	isSet bool
}

func (v NullableSchemaType) Get() *SchemaType {
	return v.value
}

func (v *NullableSchemaType) Set(val *SchemaType) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaType) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaType(val *SchemaType) *NullableSchemaType {
	return &NullableSchemaType{value: val, isSet: true}
}

func (v NullableSchemaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
