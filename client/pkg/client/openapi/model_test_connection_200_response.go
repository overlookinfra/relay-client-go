/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TestConnection200Response The response type for updating a connection
type TestConnection200Response struct {
	Availability ConnectionAvailability `json:"availability"`
}

// NewTestConnection200Response instantiates a new TestConnection200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestConnection200Response(availability ConnectionAvailability) *TestConnection200Response {
	this := TestConnection200Response{}
	this.Availability = availability
	return &this
}

// NewTestConnection200ResponseWithDefaults instantiates a new TestConnection200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestConnection200ResponseWithDefaults() *TestConnection200Response {
	this := TestConnection200Response{}
	return &this
}

// GetAvailability returns the Availability field value
func (o *TestConnection200Response) GetAvailability() ConnectionAvailability {
	if o == nil {
		var ret ConnectionAvailability
		return ret
	}

	return o.Availability
}

// GetAvailabilityOk returns a tuple with the Availability field value
// and a boolean to check if the value has been set.
func (o *TestConnection200Response) GetAvailabilityOk() (*ConnectionAvailability, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Availability, true
}

// SetAvailability sets field value
func (o *TestConnection200Response) SetAvailability(v ConnectionAvailability) {
	o.Availability = v
}

func (o TestConnection200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["availability"] = o.Availability
	}
	return json.Marshal(toSerialize)
}

type NullableTestConnection200Response struct {
	value *TestConnection200Response
	isSet bool
}

func (v NullableTestConnection200Response) Get() *TestConnection200Response {
	return v.value
}

func (v *NullableTestConnection200Response) Set(val *TestConnection200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableTestConnection200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableTestConnection200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestConnection200Response(val *TestConnection200Response) *NullableTestConnection200Response {
	return &NullableTestConnection200Response{value: val, isSet: true}
}

func (v NullableTestConnection200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestConnection200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
