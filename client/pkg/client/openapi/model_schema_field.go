/*
 * Relay API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v20200615
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SchemaField A descriptor of typed information
type SchemaField struct {
	Type *SchemaType `json:"type,omitempty"`
}

// NewSchemaField instantiates a new SchemaField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaField() *SchemaField {
	this := SchemaField{}
	var type_ SchemaType = STRING
	this.Type = &type_
	return &this
}

// NewSchemaFieldWithDefaults instantiates a new SchemaField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaFieldWithDefaults() *SchemaField {
	this := SchemaField{}
	var type_ SchemaType = STRING
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SchemaField) GetType() SchemaType {
	if o == nil || o.Type == nil {
		var ret SchemaType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaField) GetTypeOk() (*SchemaType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SchemaField) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given SchemaType and assigns it to the Type field.
func (o *SchemaField) SetType(v SchemaType) {
	o.Type = &v
}

func (o SchemaField) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableSchemaField struct {
	value *SchemaField
	isSet bool
}

func (v NullableSchemaField) Get() *SchemaField {
	return v.value
}

func (v *NullableSchemaField) Set(val *SchemaField) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaField) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaField(val *SchemaField) *NullableSchemaField {
	return &NullableSchemaField{value: val, isSet: true}
}

func (v NullableSchemaField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


