/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SecretConnectionProviderAuth Connection authentication information for form-based configuration
type SecretConnectionProviderAuth struct {
	// The type of authentication provided by the connection
	Type string `json:"type"`
}

// NewSecretConnectionProviderAuth instantiates a new SecretConnectionProviderAuth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretConnectionProviderAuth(type_ string) *SecretConnectionProviderAuth {
	this := SecretConnectionProviderAuth{}
	this.Type = type_
	return &this
}

// NewSecretConnectionProviderAuthWithDefaults instantiates a new SecretConnectionProviderAuth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretConnectionProviderAuthWithDefaults() *SecretConnectionProviderAuth {
	this := SecretConnectionProviderAuth{}
	return &this
}

// GetType returns the Type field value
func (o *SecretConnectionProviderAuth) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *SecretConnectionProviderAuth) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *SecretConnectionProviderAuth) SetType(v string) {
	o.Type = v
}

func (o SecretConnectionProviderAuth) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableSecretConnectionProviderAuth struct {
	value *SecretConnectionProviderAuth
	isSet bool
}

func (v NullableSecretConnectionProviderAuth) Get() *SecretConnectionProviderAuth {
	return v.value
}

func (v *NullableSecretConnectionProviderAuth) Set(val *SecretConnectionProviderAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretConnectionProviderAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretConnectionProviderAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretConnectionProviderAuth(val *SecretConnectionProviderAuth) *NullableSecretConnectionProviderAuth {
	return &NullableSecretConnectionProviderAuth{value: val, isSet: true}
}

func (v NullableSecretConnectionProviderAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretConnectionProviderAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


