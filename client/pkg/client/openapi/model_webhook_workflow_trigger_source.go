/*
 * Relay API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v20200615
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// WebhookWorkflowTriggerSource struct for WebhookWorkflowTriggerSource
type WebhookWorkflowTriggerSource struct {
	// Command arguments
	Args *[]string `json:"args,omitempty"`
	// Command to issue
	Command *string `json:"command,omitempty"`
	// Environment variable data to provide to the container
	Env *map[string]interface{} `json:"env,omitempty"`
	// Container image on which step is executed
	Image *string `json:"image,omitempty"`
	// Input script to execute
	Input *[]string `json:"input,omitempty"`
	// A URL to a script to run
	InputFile *string `json:"inputFile,omitempty"`
	// Variable specification data to provide to the container
	Spec *map[string]interface{} `json:"spec,omitempty"`
	// The type discriminator for this trigger source
	Type string `json:"type"`
}

// NewWebhookWorkflowTriggerSource instantiates a new WebhookWorkflowTriggerSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebhookWorkflowTriggerSource(type_ string) *WebhookWorkflowTriggerSource {
	this := WebhookWorkflowTriggerSource{}
	this.Type = type_
	return &this
}

// NewWebhookWorkflowTriggerSourceWithDefaults instantiates a new WebhookWorkflowTriggerSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebhookWorkflowTriggerSourceWithDefaults() *WebhookWorkflowTriggerSource {
	this := WebhookWorkflowTriggerSource{}
	return &this
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *WebhookWorkflowTriggerSource) GetArgs() []string {
	if o == nil || o.Args == nil {
		var ret []string
		return ret
	}
	return *o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookWorkflowTriggerSource) GetArgsOk() (*[]string, bool) {
	if o == nil || o.Args == nil {
		return nil, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *WebhookWorkflowTriggerSource) HasArgs() bool {
	if o != nil && o.Args != nil {
		return true
	}

	return false
}

// SetArgs gets a reference to the given []string and assigns it to the Args field.
func (o *WebhookWorkflowTriggerSource) SetArgs(v []string) {
	o.Args = &v
}

// GetCommand returns the Command field value if set, zero value otherwise.
func (o *WebhookWorkflowTriggerSource) GetCommand() string {
	if o == nil || o.Command == nil {
		var ret string
		return ret
	}
	return *o.Command
}

// GetCommandOk returns a tuple with the Command field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookWorkflowTriggerSource) GetCommandOk() (*string, bool) {
	if o == nil || o.Command == nil {
		return nil, false
	}
	return o.Command, true
}

// HasCommand returns a boolean if a field has been set.
func (o *WebhookWorkflowTriggerSource) HasCommand() bool {
	if o != nil && o.Command != nil {
		return true
	}

	return false
}

// SetCommand gets a reference to the given string and assigns it to the Command field.
func (o *WebhookWorkflowTriggerSource) SetCommand(v string) {
	o.Command = &v
}

// GetEnv returns the Env field value if set, zero value otherwise.
func (o *WebhookWorkflowTriggerSource) GetEnv() map[string]interface{} {
	if o == nil || o.Env == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Env
}

// GetEnvOk returns a tuple with the Env field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookWorkflowTriggerSource) GetEnvOk() (*map[string]interface{}, bool) {
	if o == nil || o.Env == nil {
		return nil, false
	}
	return o.Env, true
}

// HasEnv returns a boolean if a field has been set.
func (o *WebhookWorkflowTriggerSource) HasEnv() bool {
	if o != nil && o.Env != nil {
		return true
	}

	return false
}

// SetEnv gets a reference to the given map[string]interface{} and assigns it to the Env field.
func (o *WebhookWorkflowTriggerSource) SetEnv(v map[string]interface{}) {
	o.Env = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *WebhookWorkflowTriggerSource) GetImage() string {
	if o == nil || o.Image == nil {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookWorkflowTriggerSource) GetImageOk() (*string, bool) {
	if o == nil || o.Image == nil {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *WebhookWorkflowTriggerSource) HasImage() bool {
	if o != nil && o.Image != nil {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *WebhookWorkflowTriggerSource) SetImage(v string) {
	o.Image = &v
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *WebhookWorkflowTriggerSource) GetInput() []string {
	if o == nil || o.Input == nil {
		var ret []string
		return ret
	}
	return *o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookWorkflowTriggerSource) GetInputOk() (*[]string, bool) {
	if o == nil || o.Input == nil {
		return nil, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *WebhookWorkflowTriggerSource) HasInput() bool {
	if o != nil && o.Input != nil {
		return true
	}

	return false
}

// SetInput gets a reference to the given []string and assigns it to the Input field.
func (o *WebhookWorkflowTriggerSource) SetInput(v []string) {
	o.Input = &v
}

// GetInputFile returns the InputFile field value if set, zero value otherwise.
func (o *WebhookWorkflowTriggerSource) GetInputFile() string {
	if o == nil || o.InputFile == nil {
		var ret string
		return ret
	}
	return *o.InputFile
}

// GetInputFileOk returns a tuple with the InputFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookWorkflowTriggerSource) GetInputFileOk() (*string, bool) {
	if o == nil || o.InputFile == nil {
		return nil, false
	}
	return o.InputFile, true
}

// HasInputFile returns a boolean if a field has been set.
func (o *WebhookWorkflowTriggerSource) HasInputFile() bool {
	if o != nil && o.InputFile != nil {
		return true
	}

	return false
}

// SetInputFile gets a reference to the given string and assigns it to the InputFile field.
func (o *WebhookWorkflowTriggerSource) SetInputFile(v string) {
	o.InputFile = &v
}

// GetSpec returns the Spec field value if set, zero value otherwise.
func (o *WebhookWorkflowTriggerSource) GetSpec() map[string]interface{} {
	if o == nil || o.Spec == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Spec
}

// GetSpecOk returns a tuple with the Spec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebhookWorkflowTriggerSource) GetSpecOk() (*map[string]interface{}, bool) {
	if o == nil || o.Spec == nil {
		return nil, false
	}
	return o.Spec, true
}

// HasSpec returns a boolean if a field has been set.
func (o *WebhookWorkflowTriggerSource) HasSpec() bool {
	if o != nil && o.Spec != nil {
		return true
	}

	return false
}

// SetSpec gets a reference to the given map[string]interface{} and assigns it to the Spec field.
func (o *WebhookWorkflowTriggerSource) SetSpec(v map[string]interface{}) {
	o.Spec = &v
}

// GetType returns the Type field value
func (o *WebhookWorkflowTriggerSource) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *WebhookWorkflowTriggerSource) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *WebhookWorkflowTriggerSource) SetType(v string) {
	o.Type = v
}

func (o WebhookWorkflowTriggerSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Args != nil {
		toSerialize["args"] = o.Args
	}
	if o.Command != nil {
		toSerialize["command"] = o.Command
	}
	if o.Env != nil {
		toSerialize["env"] = o.Env
	}
	if o.Image != nil {
		toSerialize["image"] = o.Image
	}
	if o.Input != nil {
		toSerialize["input"] = o.Input
	}
	if o.InputFile != nil {
		toSerialize["inputFile"] = o.InputFile
	}
	if o.Spec != nil {
		toSerialize["spec"] = o.Spec
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableWebhookWorkflowTriggerSource struct {
	value *WebhookWorkflowTriggerSource
	isSet bool
}

func (v NullableWebhookWorkflowTriggerSource) Get() *WebhookWorkflowTriggerSource {
	return v.value
}

func (v *NullableWebhookWorkflowTriggerSource) Set(val *WebhookWorkflowTriggerSource) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookWorkflowTriggerSource) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookWorkflowTriggerSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookWorkflowTriggerSource(val *WebhookWorkflowTriggerSource) *NullableWebhookWorkflowTriggerSource {
	return &NullableWebhookWorkflowTriggerSource{value: val, isSet: true}
}

func (v NullableWebhookWorkflowTriggerSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookWorkflowTriggerSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


