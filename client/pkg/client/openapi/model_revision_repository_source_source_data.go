/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RevisionRepositorySourceSourceData Repository detail for where this revision originated from
type RevisionRepositorySourceSourceData struct {
	// Actual commit SHA that generated this revision
	Commit string `json:"commit"`
	// Path inside repo to workflow file
	Path string `json:"path"`
	// Namespace and repository name that was being tracked
	Repository string `json:"repository"`
	// Branch/tag or other ref that was being tracked
	TrackedRef string `json:"tracked_ref"`
}

// NewRevisionRepositorySourceSourceData instantiates a new RevisionRepositorySourceSourceData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevisionRepositorySourceSourceData(commit string, path string, repository string, trackedRef string) *RevisionRepositorySourceSourceData {
	this := RevisionRepositorySourceSourceData{}
	this.Commit = commit
	this.Path = path
	this.Repository = repository
	this.TrackedRef = trackedRef
	return &this
}

// NewRevisionRepositorySourceSourceDataWithDefaults instantiates a new RevisionRepositorySourceSourceData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevisionRepositorySourceSourceDataWithDefaults() *RevisionRepositorySourceSourceData {
	this := RevisionRepositorySourceSourceData{}
	return &this
}

// GetCommit returns the Commit field value
func (o *RevisionRepositorySourceSourceData) GetCommit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Commit
}

// GetCommitOk returns a tuple with the Commit field value
// and a boolean to check if the value has been set.
func (o *RevisionRepositorySourceSourceData) GetCommitOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Commit, true
}

// SetCommit sets field value
func (o *RevisionRepositorySourceSourceData) SetCommit(v string) {
	o.Commit = v
}

// GetPath returns the Path field value
func (o *RevisionRepositorySourceSourceData) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *RevisionRepositorySourceSourceData) GetPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *RevisionRepositorySourceSourceData) SetPath(v string) {
	o.Path = v
}

// GetRepository returns the Repository field value
func (o *RevisionRepositorySourceSourceData) GetRepository() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value
// and a boolean to check if the value has been set.
func (o *RevisionRepositorySourceSourceData) GetRepositoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Repository, true
}

// SetRepository sets field value
func (o *RevisionRepositorySourceSourceData) SetRepository(v string) {
	o.Repository = v
}

// GetTrackedRef returns the TrackedRef field value
func (o *RevisionRepositorySourceSourceData) GetTrackedRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TrackedRef
}

// GetTrackedRefOk returns a tuple with the TrackedRef field value
// and a boolean to check if the value has been set.
func (o *RevisionRepositorySourceSourceData) GetTrackedRefOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TrackedRef, true
}

// SetTrackedRef sets field value
func (o *RevisionRepositorySourceSourceData) SetTrackedRef(v string) {
	o.TrackedRef = v
}

func (o RevisionRepositorySourceSourceData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["commit"] = o.Commit
	}
	if true {
		toSerialize["path"] = o.Path
	}
	if true {
		toSerialize["repository"] = o.Repository
	}
	if true {
		toSerialize["tracked_ref"] = o.TrackedRef
	}
	return json.Marshal(toSerialize)
}

type NullableRevisionRepositorySourceSourceData struct {
	value *RevisionRepositorySourceSourceData
	isSet bool
}

func (v NullableRevisionRepositorySourceSourceData) Get() *RevisionRepositorySourceSourceData {
	return v.value
}

func (v *NullableRevisionRepositorySourceSourceData) Set(val *RevisionRepositorySourceSourceData) {
	v.value = val
	v.isSet = true
}

func (v NullableRevisionRepositorySourceSourceData) IsSet() bool {
	return v.isSet
}

func (v *NullableRevisionRepositorySourceSourceData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevisionRepositorySourceSourceData(val *RevisionRepositorySourceSourceData) *NullableRevisionRepositorySourceSourceData {
	return &NullableRevisionRepositorySourceSourceData{value: val, isSet: true}
}

func (v NullableRevisionRepositorySourceSourceData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevisionRepositorySourceSourceData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


