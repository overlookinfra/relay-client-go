/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ReferenceURLs URLs to access the object
type ReferenceURLs struct {
	// The API URL to this object
	ApiUrl *string `json:"api_url,omitempty"`
	// The web/HTML URL to this object
	AppUrl *string `json:"app_url,omitempty"`
}

// NewReferenceURLs instantiates a new ReferenceURLs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReferenceURLs() *ReferenceURLs {
	this := ReferenceURLs{}
	return &this
}

// NewReferenceURLsWithDefaults instantiates a new ReferenceURLs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReferenceURLsWithDefaults() *ReferenceURLs {
	this := ReferenceURLs{}
	return &this
}

// GetApiUrl returns the ApiUrl field value if set, zero value otherwise.
func (o *ReferenceURLs) GetApiUrl() string {
	if o == nil || o.ApiUrl == nil {
		var ret string
		return ret
	}
	return *o.ApiUrl
}

// GetApiUrlOk returns a tuple with the ApiUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceURLs) GetApiUrlOk() (*string, bool) {
	if o == nil || o.ApiUrl == nil {
		return nil, false
	}
	return o.ApiUrl, true
}

// HasApiUrl returns a boolean if a field has been set.
func (o *ReferenceURLs) HasApiUrl() bool {
	if o != nil && o.ApiUrl != nil {
		return true
	}

	return false
}

// SetApiUrl gets a reference to the given string and assigns it to the ApiUrl field.
func (o *ReferenceURLs) SetApiUrl(v string) {
	o.ApiUrl = &v
}

// GetAppUrl returns the AppUrl field value if set, zero value otherwise.
func (o *ReferenceURLs) GetAppUrl() string {
	if o == nil || o.AppUrl == nil {
		var ret string
		return ret
	}
	return *o.AppUrl
}

// GetAppUrlOk returns a tuple with the AppUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReferenceURLs) GetAppUrlOk() (*string, bool) {
	if o == nil || o.AppUrl == nil {
		return nil, false
	}
	return o.AppUrl, true
}

// HasAppUrl returns a boolean if a field has been set.
func (o *ReferenceURLs) HasAppUrl() bool {
	if o != nil && o.AppUrl != nil {
		return true
	}

	return false
}

// SetAppUrl gets a reference to the given string and assigns it to the AppUrl field.
func (o *ReferenceURLs) SetAppUrl(v string) {
	o.AppUrl = &v
}

func (o ReferenceURLs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApiUrl != nil {
		toSerialize["api_url"] = o.ApiUrl
	}
	if o.AppUrl != nil {
		toSerialize["app_url"] = o.AppUrl
	}
	return json.Marshal(toSerialize)
}

type NullableReferenceURLs struct {
	value *ReferenceURLs
	isSet bool
}

func (v NullableReferenceURLs) Get() *ReferenceURLs {
	return v.value
}

func (v *NullableReferenceURLs) Set(val *ReferenceURLs) {
	v.value = val
	v.isSet = true
}

func (v NullableReferenceURLs) IsSet() bool {
	return v.isSet
}

func (v *NullableReferenceURLs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReferenceURLs(val *ReferenceURLs) *NullableReferenceURLs {
	return &NullableReferenceURLs{value: val, isSet: true}
}

func (v NullableReferenceURLs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReferenceURLs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


