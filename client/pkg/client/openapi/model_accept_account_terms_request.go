/*
Relay API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v20200615
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AcceptAccountTermsRequest The request type for accepting the terms and conditions
type AcceptAccountTermsRequest struct {
	Account *AcceptAccountTermsRequestAccount `json:"account,omitempty"`
	User    *AcceptAccountTermsRequestUser    `json:"user,omitempty"`
	// The version of the terms and conditions to accept
	Version string `json:"version"`
}

// NewAcceptAccountTermsRequest instantiates a new AcceptAccountTermsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAcceptAccountTermsRequest(version string) *AcceptAccountTermsRequest {
	this := AcceptAccountTermsRequest{}
	this.Version = version
	return &this
}

// NewAcceptAccountTermsRequestWithDefaults instantiates a new AcceptAccountTermsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAcceptAccountTermsRequestWithDefaults() *AcceptAccountTermsRequest {
	this := AcceptAccountTermsRequest{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *AcceptAccountTermsRequest) GetAccount() AcceptAccountTermsRequestAccount {
	if o == nil || o.Account == nil {
		var ret AcceptAccountTermsRequestAccount
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcceptAccountTermsRequest) GetAccountOk() (*AcceptAccountTermsRequestAccount, bool) {
	if o == nil || o.Account == nil {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *AcceptAccountTermsRequest) HasAccount() bool {
	if o != nil && o.Account != nil {
		return true
	}

	return false
}

// SetAccount gets a reference to the given AcceptAccountTermsRequestAccount and assigns it to the Account field.
func (o *AcceptAccountTermsRequest) SetAccount(v AcceptAccountTermsRequestAccount) {
	o.Account = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *AcceptAccountTermsRequest) GetUser() AcceptAccountTermsRequestUser {
	if o == nil || o.User == nil {
		var ret AcceptAccountTermsRequestUser
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AcceptAccountTermsRequest) GetUserOk() (*AcceptAccountTermsRequestUser, bool) {
	if o == nil || o.User == nil {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *AcceptAccountTermsRequest) HasUser() bool {
	if o != nil && o.User != nil {
		return true
	}

	return false
}

// SetUser gets a reference to the given AcceptAccountTermsRequestUser and assigns it to the User field.
func (o *AcceptAccountTermsRequest) SetUser(v AcceptAccountTermsRequestUser) {
	o.User = &v
}

// GetVersion returns the Version field value
func (o *AcceptAccountTermsRequest) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *AcceptAccountTermsRequest) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *AcceptAccountTermsRequest) SetVersion(v string) {
	o.Version = v
}

func (o AcceptAccountTermsRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Account != nil {
		toSerialize["account"] = o.Account
	}
	if o.User != nil {
		toSerialize["user"] = o.User
	}
	if true {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableAcceptAccountTermsRequest struct {
	value *AcceptAccountTermsRequest
	isSet bool
}

func (v NullableAcceptAccountTermsRequest) Get() *AcceptAccountTermsRequest {
	return v.value
}

func (v *NullableAcceptAccountTermsRequest) Set(val *AcceptAccountTermsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAcceptAccountTermsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAcceptAccountTermsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcceptAccountTermsRequest(val *AcceptAccountTermsRequest) *NullableAcceptAccountTermsRequest {
	return &NullableAcceptAccountTermsRequest{value: val, isSet: true}
}

func (v NullableAcceptAccountTermsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcceptAccountTermsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
